/*
 * generated by Xtext 2.32.0
 */
package org.farhan.cukefsm.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.farhan.cukefsm.cucumberFSM.Background;
import org.farhan.cukefsm.cucumberFSM.CucumberFSMPackage;
import org.farhan.cukefsm.cucumberFSM.Description;
import org.farhan.cukefsm.cucumberFSM.DocString;
import org.farhan.cukefsm.cucumberFSM.Example;
import org.farhan.cukefsm.cucumberFSM.Feature;
import org.farhan.cukefsm.cucumberFSM.RowCell;
import org.farhan.cukefsm.cucumberFSM.Scenario;
import org.farhan.cukefsm.cucumberFSM.ScenarioOutline;
import org.farhan.cukefsm.cucumberFSM.Step;
import org.farhan.cukefsm.cucumberFSM.Table;
import org.farhan.cukefsm.cucumberFSM.TableRow;
import org.farhan.cukefsm.services.CucumberFSMGrammarAccess;

@SuppressWarnings("all")
public class CucumberFSMSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CucumberFSMGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CucumberFSMPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CucumberFSMPackage.BACKGROUND:
				sequence_Background(context, (Background) semanticObject); 
				return; 
			case CucumberFSMPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case CucumberFSMPackage.DOC_STRING:
				sequence_DocString(context, (DocString) semanticObject); 
				return; 
			case CucumberFSMPackage.EXAMPLE:
				sequence_Example(context, (Example) semanticObject); 
				return; 
			case CucumberFSMPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case CucumberFSMPackage.ROW_CELL:
				sequence_RowCell(context, (RowCell) semanticObject); 
				return; 
			case CucumberFSMPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case CucumberFSMPackage.SCENARIO_OUTLINE:
				sequence_ScenarioOutline(context, (ScenarioOutline) semanticObject); 
				return; 
			case CucumberFSMPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case CucumberFSMPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case CucumberFSMPackage.TABLE_ROW:
				sequence_TableRow(context, (TableRow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Background returns Background
	 *
	 * Constraint:
	 *     (title=Sentence description=Description steps+=Step*)
	 * </pre>
	 */
	protected void sequence_Background(ISerializationContext context, Background semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     sentences+=Sentence*
	 * </pre>
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DocString returns DocString
	 *
	 * Constraint:
	 *     {DocString}
	 * </pre>
	 */
	protected void sequence_DocString(ISerializationContext context, DocString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Example returns Example
	 *
	 * Constraint:
	 *     (title=Sentence description=Description table=Table)
	 * </pre>
	 */
	protected void sequence_Example(ISerializationContext context, Example semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CucumberFSMPackage.Literals.EXAMPLE__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberFSMPackage.Literals.EXAMPLE__TITLE));
			if (transientValues.isValueTransient(semanticObject, CucumberFSMPackage.Literals.EXAMPLE__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberFSMPackage.Literals.EXAMPLE__DESCRIPTION));
			if (transientValues.isValueTransient(semanticObject, CucumberFSMPackage.Literals.EXAMPLE__TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberFSMPackage.Literals.EXAMPLE__TABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExampleAccess().getTitleSentenceParserRuleCall_2_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getExampleAccess().getDescriptionDescriptionParserRuleCall_4_0(), semanticObject.getDescription());
		feeder.accept(grammarAccess.getExampleAccess().getTableTableParserRuleCall_5_0(), semanticObject.getTable());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (title=Sentence description=Description background=Background? scenarios+=AbstractScenario*)
	 * </pre>
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RowCell returns RowCell
	 *
	 * Constraint:
	 *     cell='|'
	 * </pre>
	 */
	protected void sequence_RowCell(ISerializationContext context, RowCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CucumberFSMPackage.Literals.ROW_CELL__CELL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberFSMPackage.Literals.ROW_CELL__CELL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRowCellAccess().getCellVerticalLineKeyword_0_0(), semanticObject.getCell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractScenario returns ScenarioOutline
	 *     ScenarioOutline returns ScenarioOutline
	 *
	 * Constraint:
	 *     (title=Sentence description=Description steps+=Step* examples+=Example+)
	 * </pre>
	 */
	protected void sequence_ScenarioOutline(ISerializationContext context, ScenarioOutline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractScenario returns Scenario
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (title=Sentence description=Description steps+=Step*)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (title=Sentence (table=Table | text=DocString)?)
	 * </pre>
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TableRow returns TableRow
	 *
	 * Constraint:
	 *     cells+=RowCell+
	 * </pre>
	 */
	protected void sequence_TableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     rows+=TableRow+
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
