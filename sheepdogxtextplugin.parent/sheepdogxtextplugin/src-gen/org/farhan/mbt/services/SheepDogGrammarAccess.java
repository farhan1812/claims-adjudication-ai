/*
 * generated by Xtext 2.36.0
 */
package org.farhan.mbt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SheepDogGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStepObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//    StepObject | Feature;
		@Override public ParserRule getRule() { return rule; }
		
		//StepObject | Feature
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StepObject
		public RuleCall getStepObjectParserRuleCall_0() { return cStepObjectParserRuleCall_0; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_1() { return cFeatureParserRuleCall_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsFeatureTagsParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cBackgroundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBackgroundBackgroundParserRuleCall_5_0 = (RuleCall)cBackgroundAssignment_5.eContents().get(0);
		private final Assignment cScenariosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScenariosScenarioParserRuleCall_6_0 = (RuleCall)cScenariosAssignment_6.eContents().get(0);
		
		//Feature:
		//    tags=FeatureTags?
		//    '=' name=Phrase EOL
		//    statements+=Statement*
		//    background=Background?
		//    scenarios+=Scenario*;
		@Override public ParserRule getRule() { return rule; }
		
		//tags=FeatureTags?
		//'=' name=Phrase EOL
		//statements+=Statement*
		//background=Background?
		//scenarios+=Scenario*
		public Group getGroup() { return cGroup; }
		
		//tags=FeatureTags?
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//FeatureTags
		public RuleCall getTagsFeatureTagsParserRuleCall_0_0() { return cTagsFeatureTagsParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//background=Background?
		public Assignment getBackgroundAssignment_5() { return cBackgroundAssignment_5; }
		
		//Background
		public RuleCall getBackgroundBackgroundParserRuleCall_5_0() { return cBackgroundBackgroundParserRuleCall_5_0; }
		
		//scenarios+=Scenario*
		public Assignment getScenariosAssignment_6() { return cScenariosAssignment_6; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_6_0() { return cScenariosScenarioParserRuleCall_6_0; }
	}
	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBackgroundTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePhraseParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		
		//Background:
		//    '[background="true"]' EOL
		//    '==' name=Phrase EOL
		//    statements+=Statement*
		//    steps+=Step*;
		@Override public ParserRule getRule() { return rule; }
		
		//'[background="true"]' EOL
		//'==' name=Phrase EOL
		//statements+=Statement*
		//steps+=Step*
		public Group getGroup() { return cGroup; }
		
		//'[background="true"]'
		public Keyword getBackgroundTrueKeyword_0() { return cBackgroundTrueKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignKeyword_2; }
		
		//name=Phrase
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_3_0() { return cNamePhraseParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_6_0() { return cStepsStepParserRuleCall_6_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsScenarioTagsParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		private final Assignment cExamplesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExamplesExamplesParserRuleCall_6_0 = (RuleCall)cExamplesAssignment_6.eContents().get(0);
		
		//Scenario:
		//    tags=ScenarioTags?
		//    '==' name=Phrase EOL
		//    statements+=Statement*
		//    steps+=Step*
		//    examples+=Examples+;
		@Override public ParserRule getRule() { return rule; }
		
		//tags=ScenarioTags?
		//'==' name=Phrase EOL
		//statements+=Statement*
		//steps+=Step*
		//examples+=Examples+
		public Group getGroup() { return cGroup; }
		
		//tags=ScenarioTags?
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//ScenarioTags
		public RuleCall getTagsScenarioTagsParserRuleCall_0_0() { return cTagsScenarioTagsParserRuleCall_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1() { return cEqualsSignEqualsSignKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_4_0() { return cStatementsStatementParserRuleCall_4_0; }
		
		//steps+=Step*
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }
		
		//examples+=Examples+
		public Assignment getExamplesAssignment_6() { return cExamplesAssignment_6; }
		
		//Examples
		public RuleCall getExamplesExamplesParserRuleCall_6_0() { return cExamplesExamplesParserRuleCall_6_0; }
	}
	public class ExamplesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Examples");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExamplesTrueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNamePhraseParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Assignment cTheExamplesTableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTheExamplesTableTableParserRuleCall_6_0 = (RuleCall)cTheExamplesTableAssignment_6.eContents().get(0);
		
		//Examples:
		//    '[examples="true"]' EOL
		//    '===' name=Phrase EOL
		//    statements+=Statement*
		//    theExamplesTable=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//'[examples="true"]' EOL
		//'===' name=Phrase EOL
		//statements+=Statement*
		//theExamplesTable=Table
		public Group getGroup() { return cGroup; }
		
		//'[examples="true"]'
		public Keyword getExamplesTrueKeyword_0() { return cExamplesTrueKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }
		
		//name=Phrase
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_3_0() { return cNamePhraseParserRuleCall_3_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }
		
		//theExamplesTable=Table
		public Assignment getTheExamplesTableAssignment_6() { return cTheExamplesTableAssignment_6; }
		
		//Table
		public RuleCall getTheExamplesTableTableParserRuleCall_6_0() { return cTheExamplesTableTableParserRuleCall_6_0; }
	}
	public class ScenarioTagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.ScenarioTags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cQuotationMarkRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ScenarioTags:
		//    '[tags="' name=Phrase '"]' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'[tags="' name=Phrase '"]' EOL
		public Group getGroup() { return cGroup; }
		
		//'[tags="'
		public Keyword getTagsKeyword_0() { return cTagsKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//'"]'
		public Keyword getQuotationMarkRightSquareBracketKeyword_2() { return cQuotationMarkRightSquareBracketKeyword_2; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
	}
	public class FeatureTagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.FeatureTags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTagsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FeatureTags:
		//    ':tags:' name=Phrase EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//':tags:' name=Phrase EOL
		public Group getGroup() { return cGroup; }
		
		//':tags:'
		public Keyword getTagsKeyword_0() { return cTagsKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGivenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhenParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cThenParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Step:
		//    Given | When | Then;
		@Override public ParserRule getRule() { return rule; }
		
		//Given | When | Then
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Given
		public RuleCall getGivenParserRuleCall_0() { return cGivenParserRuleCall_0; }
		
		//When
		public RuleCall getWhenParserRuleCall_1() { return cWhenParserRuleCall_1; }
		
		//Then
		public RuleCall getThenParserRuleCall_2() { return cThenParserRuleCall_2; }
	}
	public class GivenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Given");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGivenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//Given:
		//    '===' 'Given' name=Phrase EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Given' name=Phrase EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Given'
		public Keyword getGivenKeyword_1() { return cGivenKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class WhenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.When");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//When:
		//    '===' 'When' name=Phrase EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'When' name=Phrase EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'When'
		public Keyword getWhenKeyword_1() { return cWhenKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class ThenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Then");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cThenKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamePhraseParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cTheStepTableAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cTheStepTableTableParserRuleCall_4_0_0 = (RuleCall)cTheStepTableAssignment_4_0.eContents().get(0);
		private final Assignment cTheDocStringAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTheDocStringDocStringParserRuleCall_4_1_0 = (RuleCall)cTheDocStringAssignment_4_1.eContents().get(0);
		
		//Then:
		//    '===' 'Then' name=Phrase EOL
		//    (theStepTable=Table | theDocString=DocString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' 'Then' name=Phrase EOL
		//(theStepTable=Table | theDocString=DocString)?
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//'Then'
		public Keyword getThenKeyword_1() { return cThenKeyword_1; }
		
		//name=Phrase
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_2_0() { return cNamePhraseParserRuleCall_2_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//(theStepTable=Table | theDocString=DocString)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//theStepTable=Table
		public Assignment getTheStepTableAssignment_4_0() { return cTheStepTableAssignment_4_0; }
		
		//Table
		public RuleCall getTheStepTableTableParserRuleCall_4_0_0() { return cTheStepTableTableParserRuleCall_4_0_0; }
		
		//theDocString=DocString
		public Assignment getTheDocStringAssignment_4_1() { return cTheDocStringAssignment_4_1; }
		
		//DocString
		public RuleCall getTheDocStringDocStringParserRuleCall_4_1_0() { return cTheDocStringDocStringParserRuleCall_4_1_0; }
	}
	public class DocStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.DocString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cLinesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinesLineParserRuleCall_2_0 = (RuleCall)cLinesAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DocString:
		//    '----' EOL
		//    lines+=Line+
		//    '----' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'----' EOL
		//lines+=Line+
		//'----' EOL
		public Group getGroup() { return cGroup; }
		
		//'----'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_0() { return cHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//lines+=Line+
		public Assignment getLinesAssignment_2() { return cLinesAssignment_2; }
		
		//Line
		public RuleCall getLinesLineParserRuleCall_2_0() { return cLinesLineParserRuleCall_2_0; }
		
		//'----'
		public Keyword getHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_3() { return cHyphenMinusHyphenMinusHyphenMinusHyphenMinusKeyword_3; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
	}
	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameLineBitsParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Line:
		//    name=LineBits EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=LineBits EOL
		public Group getGroup() { return cGroup; }
		
		//name=LineBits
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//LineBits
		public RuleCall getNameLineBitsParserRuleCall_0_0() { return cNameLineBitsParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class LineBitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.LineBits");
		private final RuleCall cTEXT_LITERALParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LineBits:
		//    TEXT_LITERAL*;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT_LITERAL*
		public RuleCall getTEXT_LITERALParserRuleCall() { return cTEXT_LITERALParserRuleCall; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionsHeaderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cRowsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRowsRowParserRuleCall_4_0 = (RuleCall)cRowsAssignment_4.eContents().get(0);
		private final Keyword cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cEOLTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//// TODO this is duplicate of StepTable
		//Table:
		//    '[options="header"]' EOL
		//    '|===' EOL
		//    rows+=Row+
		//    '|===' EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//'[options="header"]' EOL
		//'|===' EOL
		//rows+=Row+
		//'|===' EOL
		public Group getGroup() { return cGroup; }
		
		//'[options="header"]'
		public Keyword getOptionsHeaderKeyword_0() { return cOptionsHeaderKeyword_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
		
		//'|==='
		public Keyword getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_2() { return cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_2; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//rows+=Row+
		public Assignment getRowsAssignment_4() { return cRowsAssignment_4; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_4_0() { return cRowsRowParserRuleCall_4_0; }
		
		//'|==='
		public Keyword getVerticalLineEqualsSignEqualsSignEqualsSignKeyword_5() { return cVerticalLineEqualsSignEqualsSignEqualsSignKeyword_5; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_6() { return cEOLTerminalRuleCall_6; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCellsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCellsCellParserRuleCall_0_0 = (RuleCall)cCellsAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Row:
		//    cells+=Cell+ EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//cells+=Cell+ EOL
		public Group getGroup() { return cGroup; }
		
		//cells+=Cell+
		public Assignment getCellsAssignment_0() { return cCellsAssignment_0; }
		
		//Cell
		public RuleCall getCellsCellParserRuleCall_0_0() { return cCellsCellParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Cell:
		//    '|' name=Phrase;
		@Override public ParserRule getRule() { return rule; }
		
		//'|' name=Phrase
		public Group getGroup() { return cGroup; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0() { return cVerticalLineKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePhraseParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Statement:
		//    name=Phrase EOL;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Phrase EOL
		public Group getGroup() { return cGroup; }
		
		//name=Phrase
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_0_0() { return cNamePhraseParserRuleCall_0_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.Phrase");
		private final RuleCall cTEXT_LITERALParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Phrase:
		//    TEXT_LITERAL+;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT_LITERAL+
		public RuleCall getTEXT_LITERALParserRuleCall() { return cTEXT_LITERALParserRuleCall; }
	}
	public class TEXT_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.TEXT_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TEXT_LITERAL:
		//    WORD
		//    | ID
		//    | STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//WORD
		//| ID
		//| STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_0() { return cWORDTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	public class StepObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cStepDefinitionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepDefinitionsStepDefinitionParserRuleCall_4_0 = (RuleCall)cStepDefinitionsAssignment_4.eContents().get(0);
		
		//StepObject:
		//    '=' name=Phrase EOL
		//    statements+=Statement*
		//    stepDefinitions+=StepDefinition*;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' name=Phrase EOL
		//statements+=Statement*
		//stepDefinitions+=StepDefinition*
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//stepDefinitions+=StepDefinition*
		public Assignment getStepDefinitionsAssignment_4() { return cStepDefinitionsAssignment_4; }
		
		//StepDefinition
		public RuleCall getStepDefinitionsStepDefinitionParserRuleCall_4_0() { return cStepDefinitionsStepDefinitionParserRuleCall_4_0; }
	}
	public class StepDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cStepParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepParametersStepParametersParserRuleCall_4_0 = (RuleCall)cStepParametersAssignment_4.eContents().get(0);
		
		//StepDefinition:
		//    '==' name=Phrase EOL
		//    statements+=Statement*
		//    stepParameters+=StepParameters*;
		@Override public ParserRule getRule() { return rule; }
		
		//'==' name=Phrase EOL
		//statements+=Statement*
		//stepParameters+=StepParameters*
		public Group getGroup() { return cGroup; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//stepParameters+=StepParameters*
		public Assignment getStepParametersAssignment_4() { return cStepParametersAssignment_4; }
		
		//StepParameters
		public RuleCall getStepParametersStepParametersParserRuleCall_4_0() { return cStepParametersStepParametersParserRuleCall_4_0; }
	}
	public class StepParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.StepParameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePhraseParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Assignment cParametersTableAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersTableTableParserRuleCall_4_0 = (RuleCall)cParametersTableAssignment_4.eContents().get(0);
		
		//StepParameters:
		//    '===' name=Phrase EOL
		//    statements+=Statement*
		//    parametersTable=Table;
		@Override public ParserRule getRule() { return rule; }
		
		//'===' name=Phrase EOL
		//statements+=Statement*
		//parametersTable=Table
		public Group getGroup() { return cGroup; }
		
		//'==='
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignEqualsSignKeyword_0; }
		
		//name=Phrase
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//Phrase
		public RuleCall getNamePhraseParserRuleCall_1_0() { return cNamePhraseParserRuleCall_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//parametersTable=Table
		public Assignment getParametersTableAssignment_4() { return cParametersTableAssignment_4; }
		
		//Table
		public RuleCall getParametersTableTableParserRuleCall_4_0() { return cParametersTableTableParserRuleCall_4_0; }
	}
	
	
	private final ModelElements pModel;
	private final FeatureElements pFeature;
	private final BackgroundElements pBackground;
	private final ScenarioElements pScenario;
	private final ExamplesElements pExamples;
	private final ScenarioTagsElements pScenarioTags;
	private final FeatureTagsElements pFeatureTags;
	private final StepElements pStep;
	private final GivenElements pGiven;
	private final WhenElements pWhen;
	private final ThenElements pThen;
	private final DocStringElements pDocString;
	private final LineElements pLine;
	private final LineBitsElements pLineBits;
	private final TableElements pTable;
	private final RowElements pRow;
	private final CellElements pCell;
	private final StatementElements pStatement;
	private final PhraseElements pPhrase;
	private final TEXT_LITERALElements pTEXT_LITERAL;
	private final StepObjectElements pStepObject;
	private final StepDefinitionElements pStepDefinition;
	private final StepParametersElements pStepParameters;
	private final TerminalRule tID;
	private final TerminalRule tWORD;
	private final TerminalRule tSTRING;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tEOL;
	
	private final Grammar grammar;

	@Inject
	public SheepDogGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pFeature = new FeatureElements();
		this.pBackground = new BackgroundElements();
		this.pScenario = new ScenarioElements();
		this.pExamples = new ExamplesElements();
		this.pScenarioTags = new ScenarioTagsElements();
		this.pFeatureTags = new FeatureTagsElements();
		this.pStep = new StepElements();
		this.pGiven = new GivenElements();
		this.pWhen = new WhenElements();
		this.pThen = new ThenElements();
		this.pDocString = new DocStringElements();
		this.pLine = new LineElements();
		this.pLineBits = new LineBitsElements();
		this.pTable = new TableElements();
		this.pRow = new RowElements();
		this.pCell = new CellElements();
		this.pStatement = new StatementElements();
		this.pPhrase = new PhraseElements();
		this.pTEXT_LITERAL = new TEXT_LITERALElements();
		this.pStepObject = new StepObjectElements();
		this.pStepDefinition = new StepDefinitionElements();
		this.pStepParameters = new StepParametersElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.ID");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.WORD");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.SL_COMMENT");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.farhan.mbt.SheepDog.EOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.farhan.mbt.SheepDog".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    StepObject | Feature;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Feature:
	//    tags=FeatureTags?
	//    '=' name=Phrase EOL
	//    statements+=Statement*
	//    background=Background?
	//    scenarios+=Scenario*;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Background:
	//    '[background="true"]' EOL
	//    '==' name=Phrase EOL
	//    statements+=Statement*
	//    steps+=Step*;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}
	
	//Scenario:
	//    tags=ScenarioTags?
	//    '==' name=Phrase EOL
	//    statements+=Statement*
	//    steps+=Step*
	//    examples+=Examples+;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Examples:
	//    '[examples="true"]' EOL
	//    '===' name=Phrase EOL
	//    statements+=Statement*
	//    theExamplesTable=Table;
	public ExamplesElements getExamplesAccess() {
		return pExamples;
	}
	
	public ParserRule getExamplesRule() {
		return getExamplesAccess().getRule();
	}
	
	//ScenarioTags:
	//    '[tags="' name=Phrase '"]' EOL;
	public ScenarioTagsElements getScenarioTagsAccess() {
		return pScenarioTags;
	}
	
	public ParserRule getScenarioTagsRule() {
		return getScenarioTagsAccess().getRule();
	}
	
	//FeatureTags:
	//    ':tags:' name=Phrase EOL;
	public FeatureTagsElements getFeatureTagsAccess() {
		return pFeatureTags;
	}
	
	public ParserRule getFeatureTagsRule() {
		return getFeatureTagsAccess().getRule();
	}
	
	//Step:
	//    Given | When | Then;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//Given:
	//    '===' 'Given' name=Phrase EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public GivenElements getGivenAccess() {
		return pGiven;
	}
	
	public ParserRule getGivenRule() {
		return getGivenAccess().getRule();
	}
	
	//When:
	//    '===' 'When' name=Phrase EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public WhenElements getWhenAccess() {
		return pWhen;
	}
	
	public ParserRule getWhenRule() {
		return getWhenAccess().getRule();
	}
	
	//Then:
	//    '===' 'Then' name=Phrase EOL
	//    (theStepTable=Table | theDocString=DocString)?;
	public ThenElements getThenAccess() {
		return pThen;
	}
	
	public ParserRule getThenRule() {
		return getThenAccess().getRule();
	}
	
	//DocString:
	//    '----' EOL
	//    lines+=Line+
	//    '----' EOL;
	public DocStringElements getDocStringAccess() {
		return pDocString;
	}
	
	public ParserRule getDocStringRule() {
		return getDocStringAccess().getRule();
	}
	
	//Line:
	//    name=LineBits EOL;
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}
	
	//LineBits:
	//    TEXT_LITERAL*;
	public LineBitsElements getLineBitsAccess() {
		return pLineBits;
	}
	
	public ParserRule getLineBitsRule() {
		return getLineBitsAccess().getRule();
	}
	
	//// TODO this is duplicate of StepTable
	//Table:
	//    '[options="header"]' EOL
	//    '|===' EOL
	//    rows+=Row+
	//    '|===' EOL;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Row:
	//    cells+=Cell+ EOL;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//Cell:
	//    '|' name=Phrase;
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}
	
	//Statement:
	//    name=Phrase EOL;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Phrase:
	//    TEXT_LITERAL+;
	public PhraseElements getPhraseAccess() {
		return pPhrase;
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}
	
	//TEXT_LITERAL:
	//    WORD
	//    | ID
	//    | STRING;
	public TEXT_LITERALElements getTEXT_LITERALAccess() {
		return pTEXT_LITERAL;
	}
	
	public ParserRule getTEXT_LITERALRule() {
		return getTEXT_LITERALAccess().getRule();
	}
	
	//StepObject:
	//    '=' name=Phrase EOL
	//    statements+=Statement*
	//    stepDefinitions+=StepDefinition*;
	public StepObjectElements getStepObjectAccess() {
		return pStepObject;
	}
	
	public ParserRule getStepObjectRule() {
		return getStepObjectAccess().getRule();
	}
	
	//StepDefinition:
	//    '==' name=Phrase EOL
	//    statements+=Statement*
	//    stepParameters+=StepParameters*;
	public StepDefinitionElements getStepDefinitionAccess() {
		return pStepDefinition;
	}
	
	public ParserRule getStepDefinitionRule() {
		return getStepDefinitionAccess().getRule();
	}
	
	//StepParameters:
	//    '===' name=Phrase EOL
	//    statements+=Statement*
	//    parametersTable=Table;
	public StepParametersElements getStepParametersAccess() {
		return pStepParameters;
	}
	
	public ParserRule getStepParametersRule() {
		return getStepParametersAccess().getRule();
	}
	
	//terminal ID:
	//    ('0'..'9' | 'a'..'z' | 'A'..'Z' | '_' | '-' | '.' | ',')+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal WORD:
	//    !('@' | '|' | ' ' | '\t' | '\n' | '\r')
	//    !(' ' | '\t' | '\n' | '\r')*;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//// Not sure how this is helping, will remove it
	//terminal STRING:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"' | '\r' | '\n'))* '"' |
	//    "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'" | '\r' | '\n'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal WS:
	//    (' ' | '\t' | '\r')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//// single line comment
	//terminal SL_COMMENT:
	//    '#' !('\n')* EOL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal EOL:
	//    ('\n')+;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
}
