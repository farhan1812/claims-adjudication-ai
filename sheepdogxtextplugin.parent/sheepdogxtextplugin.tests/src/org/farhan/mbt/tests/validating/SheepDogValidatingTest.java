/*
 * generated by Xtext 2.32.0
 */
package org.farhan.mbt.tests.validating;

import java.io.IOException;
import java.util.Set;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.farhan.mbt.sheepDog.SheepDogPackage;
import org.farhan.mbt.tests.SheepDogInjectorProvider;
import org.farhan.mbt.validation.SheepDogValidator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

import com.google.common.reflect.ClassPath;
import com.google.common.reflect.ClassPath.ClassInfo;

@ExtendWith(InjectionExtension.class)
@InjectWith(SheepDogInjectorProvider.class)
public class SheepDogValidatingTest extends ValidatingTest {

	public ClassInfo getClassInPackage(String rootPkg, String testObjName) throws IOException {

		Set<ClassInfo> testObjs = ClassPath.from(ClassLoader.getSystemClassLoader()).getAllClasses();
		for (ClassInfo testObj : testObjs) {
			if (testObj.getName().endsWith(testObjName) && testObj.getName().startsWith(rootPkg)) {
				return testObj;
			}
		}
		return null;
	}

	@Test
	public void validateStateAppEmpty() throws Exception {

		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah application, something/something/something/Object is empty\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStateSvcEmpty() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah service, something/something/something/Object is empty\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStateEmpty() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The something/something/something/Object is empty\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStateAppPresent() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah application, something/something/something/Object is present\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStateSvcPresent() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah service, something/something/something/Object is present\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStatePresent() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The something/something/something/Object is present\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStateAppFollows() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah application, something/something/something/Object is created as follows\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateSvcAppFollows() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah service, something/something/something/Object is created as follows\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateStateFollows() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The something/something/something/Object is created as follows\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateTransitionGood() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah request is good\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateTransitionBad() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah request is bad\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateTransitionSentWith() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah request is sent with\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateTransitionTriggeredWith() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah request is triggered with\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateTransitionSentFollows() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("The blah request is sent as follows\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateTransitionTriggeredFollows() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: Name\n");
		sb.append("Scenario: Name\n");
		sb.append("Given: The blah request is triggered as follows\n");
		validationTestHelper.assertNoIssues(parseFeatureHelper.parse(sb));
	}

	@Test
	public void validateCaptialStart() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: basic scenario Test\n");
		validationTestHelper.assertWarning(parseFeatureHelper.parse(sb), SheepDogPackage.Literals.FEATURE,
				SheepDogValidator.INVALID_NAME, "Name should start with a capital");
	}
}
