/*
 * generated by Xtext 2.32.0
 */
package org.farhan.ui.quickfix;

import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.xtext.builder.EclipseResourceFileSystemAccess2;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.farhan.cucumber.Step;
import org.farhan.generator.CucumberOutputConfigurationProvider;
import org.farhan.generator.StepDefGenerator;
import org.farhan.validation.CucumberValidator;
import com.google.inject.Inject;
import com.google.inject.Provider;

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class CucumberQuickfixProvider extends DefaultQuickfixProvider {

	@Inject
	private Provider<EclipseResourceFileSystemAccess2> fileAccessProvider;

	private EclipseResourceFileSystemAccess2 getFSA(Resource resource) {
		EclipseResourceFileSystemAccess2 fsa = fileAccessProvider.get();
		fsa.setOutputConfigurations(CucumberOutputConfigurationProvider.ocpMap);
		fsa.setProject(ResourcesPlugin.getWorkspace().getRoot()
				.getFile(new Path(resource.getURI().toPlatformString(true))).getProject());

		return fsa;
	}

	@Fix(CucumberValidator.MISSING_STEP_DEF)
	public void generateStepDef(final Issue issue, IssueResolutionAcceptor acceptor) {

		acceptor.accept(issue, "Generate step def", "Generate step def.", "upcase.png", new IModification() {
			public void apply(IModificationContext context) throws BadLocationException {
				Resource resource = new ResourceSetImpl().getResource(issue.getUriToProblem(), true);
				Step step = (Step) resource.getEObject(issue.getUriToProblem().toString().split("#")[1]);
				EclipseResourceFileSystemAccess2 fsa = getFSA(resource);
				StepDefGenerator.generate(fsa, step);
			}
		});
	}

	@Fix(CucumberValidator.INVALID_NAME)
	public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", new IModification() {
			public void apply(IModificationContext context) throws BadLocationException {
				IXtextDocument xtextDocument = context.getXtextDocument();
				String firstLetter = xtextDocument.get(issue.getOffset(), 1);
				xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
			}
		});
	}

	@Fix(CucumberValidator.INVALID_HEADER)
	public void capitalizeStepTableName(final Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Capitalize step table name", "Capitalize the step table name.", "upcase.png",
				new IModification() {
					public void apply(IModificationContext context) throws BadLocationException {
						IXtextDocument xtextDocument = context.getXtextDocument();
						String oldHeader = issue.getData()[0];
						String newHeader = oldHeader.substring(0, 1).toUpperCase() + oldHeader.substring(1);
						String oldRow = xtextDocument.get(issue.getOffset(), issue.getLength());
						String newRow = oldRow.replace(oldHeader, newHeader);
						xtextDocument.replace(issue.getOffset(), issue.getLength(), newRow);
					}
				});
	}

}
