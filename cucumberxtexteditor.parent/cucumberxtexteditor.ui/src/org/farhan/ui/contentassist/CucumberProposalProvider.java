/*
 * generated by Xtext 2.32.0
 */
package org.farhan.ui.contentassist;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.TreeSet;

import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.Path;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.farhan.cucumber.Given;
import org.farhan.cucumber.Step;
import org.farhan.generator.CucumberOutputConfigurationProvider;
import org.farhan.generator.StepDefGenerator;
import org.farhan.validation.StepValidator;

/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class CucumberProposalProvider extends AbstractCucumberProposalProvider {

	private static void logError(Exception e, String name) {
		// TODO inject the logger instead
		System.out.println("There was a problem listing directories for: " + name);
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		System.out.println(sw.toString());
	}

	public void completeGiven_Name(Given step, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		super.completeGiven_Name(step, assignment, context, acceptor);
		String component;
		if (step.getName() == null) {
			component = "";
		} else {
			component = StepValidator.getComponent(step.getName());
		}
		if (component.isEmpty()) {
			// get a list of previous objects
			TreeSet<String> previousObjects = StepDefGenerator.getPreviousObjects(step);
			for (String previousObject : previousObjects) {
				acceptor.accept(createCompletionProposal("The " + previousObject, context));
			}
			// get a list of applications
			for (IResource stepDefComponent : getFolders(step, "")) {
				acceptor.accept(createCompletionProposal("The " + stepDefComponent.getName() + ", ", context));
			}
		} else {
			// get a list of objects
			// TODO should this list objects only and objects with their paths? Right now it
			// does object with path
			// TODO recursively search component directory for objects
			for (IResource stepDefObjectResource : getFolders(step, "/" + component)) {

				// ([^\/]+)\/([^\/]+)\/(.*).feature group 3
				String stepDefObject = stepDefObjectResource.getProjectRelativePath().toString()
						.split("/" + component + "/")[1].replace(".feature", "");
				acceptor.accept(createCompletionProposal("The " + component + ", " + stepDefObject, context));
			}
		}
	}

	private IResource[] getFolders(Step step, String name) {
		try {
			IProject project = ResourcesPlugin.getWorkspace().getRoot()
					.getFile(new Path(step.eResource().getURI().toPlatformString(true))).getProject();
			IFolder folder = project
					.getFolder(CucumberOutputConfigurationProvider.stepDefsOutput.getOutputDirectory() + name);
			return folder.members();
		} catch (CoreException e) {
			logError(e, name);
			return new IResource[] {};
		}
	}
}
