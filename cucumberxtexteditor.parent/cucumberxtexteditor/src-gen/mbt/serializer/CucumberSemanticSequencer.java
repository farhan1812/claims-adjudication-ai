/*
 * generated by Xtext 2.32.0
 */
package mbt.serializer;

import com.google.inject.Inject;
import java.util.Set;
import mbt.cucumber.Background;
import mbt.cucumber.CucumberPackage;
import mbt.cucumber.DocString;
import mbt.cucumber.Example;
import mbt.cucumber.Feature;
import mbt.cucumber.Scenario;
import mbt.cucumber.ScenarioOutline;
import mbt.cucumber.Step;
import mbt.cucumber.Table;
import mbt.cucumber.TableCol;
import mbt.cucumber.TableRow;
import mbt.cucumber.Tag;
import mbt.cucumber.Text;
import mbt.cucumber.TextLine;
import mbt.services.CucumberGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CucumberSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CucumberGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CucumberPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CucumberPackage.BACKGROUND:
				sequence_Background(context, (Background) semanticObject); 
				return; 
			case CucumberPackage.DOC_STRING:
				sequence_DocString(context, (DocString) semanticObject); 
				return; 
			case CucumberPackage.EXAMPLE:
				sequence_Example(context, (Example) semanticObject); 
				return; 
			case CucumberPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case CucumberPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case CucumberPackage.SCENARIO_OUTLINE:
				sequence_ScenarioOutline(context, (ScenarioOutline) semanticObject); 
				return; 
			case CucumberPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case CucumberPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case CucumberPackage.TABLE_COL:
				sequence_TableCol(context, (TableCol) semanticObject); 
				return; 
			case CucumberPackage.TABLE_ROW:
				sequence_TableRow(context, (TableRow) semanticObject); 
				return; 
			case CucumberPackage.TAG:
				sequence_Tag(context, (Tag) semanticObject); 
				return; 
			case CucumberPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case CucumberPackage.TEXT_LINE:
				sequence_TextLine(context, (TextLine) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractScenario returns Background
	 *     Section returns Background
	 *     Background returns Background
	 *
	 * Constraint:
	 *     (tags+=Tag* title=Title? narrative=Narrative? steps+=Step+)
	 * </pre>
	 */
	protected void sequence_Background(ISerializationContext context, Background semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     DocString returns DocString
	 *
	 * Constraint:
	 *     text=Text
	 * </pre>
	 */
	protected void sequence_DocString(ISerializationContext context, DocString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CucumberPackage.Literals.DOC_STRING__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberPackage.Literals.DOC_STRING__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDocStringAccess().getTextTextParserRuleCall_1_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Section returns Example
	 *     Example returns Example
	 *
	 * Constraint:
	 *     (tags+=Tag* title=Title? narrative=Narrative? table=Table)
	 * </pre>
	 */
	protected void sequence_Example(ISerializationContext context, Example semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Feature returns Feature
	 *     Section returns Feature
	 *
	 * Constraint:
	 *     (tags+=Tag* title=Title narrative=Narrative? background=Background? scenarios+=AbstractScenario+)
	 * </pre>
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractScenario returns ScenarioOutline
	 *     Section returns ScenarioOutline
	 *     ScenarioOutline returns ScenarioOutline
	 *
	 * Constraint:
	 *     (tags+=Tag* title=Title? narrative=Narrative? steps+=Step+ examples+=Example+)
	 * </pre>
	 */
	protected void sequence_ScenarioOutline(ISerializationContext context, ScenarioOutline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     AbstractScenario returns Scenario
	 *     Section returns Scenario
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (tags+=Tag* title=Title? narrative=Narrative? steps+=Step+)
	 * </pre>
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (keyword=STEP_KEYWORD description=StepDescription (table=Table | code=DocString)?)
	 * </pre>
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TableCol returns TableCol
	 *
	 * Constraint:
	 *     cell=TABLE_CELL
	 * </pre>
	 */
	protected void sequence_TableCol(ISerializationContext context, TableCol semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CucumberPackage.Literals.TABLE_COL__CELL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberPackage.Literals.TABLE_COL__CELL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTableColAccess().getCellTABLE_CELLTerminalRuleCall_1_0(), semanticObject.getCell());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TableRow returns TableRow
	 *
	 * Constraint:
	 *     cols+=TableCol+
	 * </pre>
	 */
	protected void sequence_TableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     rows+=TableRow+
	 * </pre>
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Tag returns Tag
	 *
	 * Constraint:
	 *     id=TAGNAME
	 * </pre>
	 */
	protected void sequence_Tag(ISerializationContext context, Tag semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CucumberPackage.Literals.TAG__ID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberPackage.Literals.TAG__ID));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTagAccess().getIdTAGNAMETerminalRuleCall_0_0(), semanticObject.getId());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextLine returns TextLine
	 *
	 * Constraint:
	 *     value=TEXT_VALUE
	 * </pre>
	 */
	protected void sequence_TextLine(ISerializationContext context, TextLine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CucumberPackage.Literals.TEXT_LINE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CucumberPackage.Literals.TEXT_LINE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextLineAccess().getValueTEXT_VALUEParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Text returns Text
	 *
	 * Constraint:
	 *     lines+=TextLine*
	 * </pre>
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
