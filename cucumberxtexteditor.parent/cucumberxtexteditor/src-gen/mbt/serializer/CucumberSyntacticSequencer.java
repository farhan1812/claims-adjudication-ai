/*
 * generated by Xtext 2.32.0
 */
package mbt.serializer;

import com.google.inject.Inject;
import java.util.List;
import mbt.services.CucumberGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CucumberSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CucumberGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Background_EOLTerminalRuleCall_3_p;
	protected AbstractElementAlias match_DocString_EOLTerminalRuleCall_2_a;
	protected AbstractElementAlias match_Example_EOLTerminalRuleCall_3_p;
	protected AbstractElementAlias match_Feature_EOLTerminalRuleCall_3_p;
	protected AbstractElementAlias match_ScenarioOutline_EOLTerminalRuleCall_4_p;
	protected AbstractElementAlias match_Scenario_EOLTerminalRuleCall_3_p;
	protected AbstractElementAlias match_Step_EOLTerminalRuleCall_2_a;
	protected AbstractElementAlias match_Table_EOLTerminalRuleCall_2_a;
	protected AbstractElementAlias match_Tag_EOLTerminalRuleCall_1_q;
	protected AbstractElementAlias match_TextLine_EOLTerminalRuleCall_2_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CucumberGrammarAccess) access;
		match_Background_EOLTerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getBackgroundAccess().getEOLTerminalRuleCall_3());
		match_DocString_EOLTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getDocStringAccess().getEOLTerminalRuleCall_2());
		match_Example_EOLTerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getExampleAccess().getEOLTerminalRuleCall_3());
		match_Feature_EOLTerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getFeatureAccess().getEOLTerminalRuleCall_3());
		match_ScenarioOutline_EOLTerminalRuleCall_4_p = new TokenAlias(true, false, grammarAccess.getScenarioOutlineAccess().getEOLTerminalRuleCall_4());
		match_Scenario_EOLTerminalRuleCall_3_p = new TokenAlias(true, false, grammarAccess.getScenarioAccess().getEOLTerminalRuleCall_3());
		match_Step_EOLTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getStepAccess().getEOLTerminalRuleCall_2());
		match_Table_EOLTerminalRuleCall_2_a = new TokenAlias(true, true, grammarAccess.getTableAccess().getEOLTerminalRuleCall_2());
		match_Tag_EOLTerminalRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getTagAccess().getEOLTerminalRuleCall_1());
		match_TextLine_EOLTerminalRuleCall_2_p = new TokenAlias(true, false, grammarAccess.getTextLineAccess().getEOLTerminalRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEOLRule())
			return getEOLToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EOL: NL;
	 */
	protected String getEOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Background_EOLTerminalRuleCall_3_p.equals(syntax))
				emit_Background_EOLTerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DocString_EOLTerminalRuleCall_2_a.equals(syntax))
				emit_DocString_EOLTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Example_EOLTerminalRuleCall_3_p.equals(syntax))
				emit_Example_EOLTerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Feature_EOLTerminalRuleCall_3_p.equals(syntax))
				emit_Feature_EOLTerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ScenarioOutline_EOLTerminalRuleCall_4_p.equals(syntax))
				emit_ScenarioOutline_EOLTerminalRuleCall_4_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scenario_EOLTerminalRuleCall_3_p.equals(syntax))
				emit_Scenario_EOLTerminalRuleCall_3_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Step_EOLTerminalRuleCall_2_a.equals(syntax))
				emit_Step_EOLTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_EOLTerminalRuleCall_2_a.equals(syntax))
				emit_Table_EOLTerminalRuleCall_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tag_EOLTerminalRuleCall_1_q.equals(syntax))
				emit_Tag_EOLTerminalRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TextLine_EOLTerminalRuleCall_2_p.equals(syntax))
				emit_TextLine_EOLTerminalRuleCall_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Background:' (ambiguity) narrative=Narrative
	 *     (rule start) 'Background:' (ambiguity) steps+=Step
	 *     tags+=Tag 'Background:' (ambiguity) narrative=Narrative
	 *     tags+=Tag 'Background:' (ambiguity) steps+=Step
	 *     title=Title (ambiguity) narrative=Narrative
	 *     title=Title (ambiguity) steps+=Step
	 
	 * </pre>
	 */
	protected void emit_Background_EOLTerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL*
	 *
	 * This ambiguous syntax occurs at:
	 *     text=Text '"""' (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_DocString_EOLTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Examples:' (ambiguity) narrative=Narrative
	 *     (rule start) 'Examples:' (ambiguity) table=Table
	 *     tags+=Tag 'Examples:' (ambiguity) narrative=Narrative
	 *     tags+=Tag 'Examples:' (ambiguity) table=Table
	 *     title=Title (ambiguity) narrative=Narrative
	 *     title=Title (ambiguity) table=Table
	 
	 * </pre>
	 */
	protected void emit_Example_EOLTerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     title=Title (ambiguity) background=Background
	 *     title=Title (ambiguity) narrative=Narrative
	 *     title=Title (ambiguity) scenarios+=AbstractScenario
	 
	 * </pre>
	 */
	protected void emit_Feature_EOLTerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Scenario' 'Outline:' (ambiguity) narrative=Narrative
	 *     (rule start) 'Scenario' 'Outline:' (ambiguity) steps+=Step
	 *     tags+=Tag 'Scenario' 'Outline:' (ambiguity) narrative=Narrative
	 *     tags+=Tag 'Scenario' 'Outline:' (ambiguity) steps+=Step
	 *     title=Title (ambiguity) narrative=Narrative
	 *     title=Title (ambiguity) steps+=Step
	 
	 * </pre>
	 */
	protected void emit_ScenarioOutline_EOLTerminalRuleCall_4_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'Scenario:' (ambiguity) narrative=Narrative
	 *     (rule start) 'Scenario:' (ambiguity) steps+=Step
	 *     tags+=Tag 'Scenario:' (ambiguity) narrative=Narrative
	 *     tags+=Tag 'Scenario:' (ambiguity) steps+=Step
	 *     title=Title (ambiguity) narrative=Narrative
	 *     title=Title (ambiguity) steps+=Step
	 
	 * </pre>
	 */
	protected void emit_Scenario_EOLTerminalRuleCall_3_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL*
	 *
	 * This ambiguous syntax occurs at:
	 *     description=StepDescription (ambiguity) (rule end)
	 *     description=StepDescription (ambiguity) code=DocString
	 *     description=StepDescription (ambiguity) table=Table
	 
	 * </pre>
	 */
	protected void emit_Step_EOLTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL*
	 *
	 * This ambiguous syntax occurs at:
	 *     rows+=TableRow (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Table_EOLTerminalRuleCall_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL?
	 *
	 * This ambiguous syntax occurs at:
	 *     id=TAGNAME (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Tag_EOLTerminalRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL+
	 *
	 * This ambiguous syntax occurs at:
	 *     value=TEXT_VALUE (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_TextLine_EOLTerminalRuleCall_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
