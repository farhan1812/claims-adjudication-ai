/*
 * generated by Xtext 2.32.0
 */
package mbt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CucumberGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Feature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cFeatureKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cBackgroundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBackgroundBackgroundParserRuleCall_5_0 = (RuleCall)cBackgroundAssignment_5.eContents().get(0);
		private final Assignment cScenariosAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cScenariosAbstractScenarioParserRuleCall_6_0 = (RuleCall)cScenariosAssignment_6.eContents().get(0);
		
		//Feature:
		//    tags+=Tag*
		//    'Feature:'
		//    title=Title EOL+
		//    narrative=Narrative?
		//    background=Background?
		//    scenarios+=AbstractScenario+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag*
		//'Feature:'
		//title=Title EOL+
		//narrative=Narrative?
		//background=Background?
		//scenarios+=AbstractScenario+
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'Feature:'
		public Keyword getFeatureKeyword_1() { return cFeatureKeyword_1; }
		
		//title=Title
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }
		
		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }
		
		//background=Background?
		public Assignment getBackgroundAssignment_5() { return cBackgroundAssignment_5; }
		
		//Background
		public RuleCall getBackgroundBackgroundParserRuleCall_5_0() { return cBackgroundBackgroundParserRuleCall_5_0; }
		
		//scenarios+=AbstractScenario+
		public Assignment getScenariosAssignment_6() { return cScenariosAssignment_6; }
		
		//AbstractScenario
		public RuleCall getScenariosAbstractScenarioParserRuleCall_6_0() { return cScenariosAbstractScenarioParserRuleCall_6_0; }
	}
	public class AbstractScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.AbstractScenario");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cScenarioOutlineParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBackgroundParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///**
		// * Base class for Scenario implementations.
		// * A Scenario is any type with the following structure:
		// *
		// * tags+=Tag*
		// * 'Scenario:'
		// * title=Title? EOL+
		// * narrative=Narrative?
		// * steps+=Step+;
		// */
		//AbstractScenario: Scenario
		//    | ScenarioOutline
		//    | Background
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Scenario
		//   | ScenarioOutline
		//   | Background
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_0() { return cScenarioParserRuleCall_0; }
		
		//ScenarioOutline
		public RuleCall getScenarioOutlineParserRuleCall_1() { return cScenarioOutlineParserRuleCall_1; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_2() { return cBackgroundParserRuleCall_2; }
	}
	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Section");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBackgroundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbstractScenarioParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExampleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///**
		// * A Section is a generic element with the structure:
		// *
		// * tags+=Tag*
		// * 'Keyword:'
		// * title=Title? EOL+
		// * narrative=Narrative?
		// */
		//Section: Feature
		//    | Background
		//    | AbstractScenario
		//    | Example
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Feature
		//   | Background
		//   | AbstractScenario
		//   | Example
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Feature
		public RuleCall getFeatureParserRuleCall_0() { return cFeatureParserRuleCall_0; }
		
		//Background
		public RuleCall getBackgroundParserRuleCall_1() { return cBackgroundParserRuleCall_1; }
		
		//AbstractScenario
		public RuleCall getAbstractScenarioParserRuleCall_2() { return cAbstractScenarioParserRuleCall_2; }
		
		//Example
		public RuleCall getExampleParserRuleCall_3() { return cExampleParserRuleCall_3; }
	}
	public class BackgroundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Background");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cBackgroundKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		
		//Background:
		//    tags+=Tag*
		//    'Background:'
		//    title=Title? EOL+
		//    narrative=Narrative?
		//    steps+=Step+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag*
		//'Background:'
		//title=Title? EOL+
		//narrative=Narrative?
		//steps+=Step+
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'Background:'
		public Keyword getBackgroundKeyword_1() { return cBackgroundKeyword_1; }
		
		//title=Title?
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }
		
		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }
		
		//steps+=Step+
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cStepsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStepsStepParserRuleCall_5_0 = (RuleCall)cStepsAssignment_5.eContents().get(0);
		
		//Scenario:
		//    tags+=Tag*
		//    'Scenario:'
		//    title=Title? EOL+
		//    narrative=Narrative?
		//    steps+=Step+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag*
		//'Scenario:'
		//title=Title? EOL+
		//narrative=Narrative?
		//steps+=Step+
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'Scenario:'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }
		
		//title=Title?
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }
		
		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }
		
		//steps+=Step+
		public Assignment getStepsAssignment_5() { return cStepsAssignment_5; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_5_0() { return cStepsStepParserRuleCall_5_0; }
	}
	public class ScenarioOutlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.ScenarioOutline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOutlineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTitleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTitleTitleParserRuleCall_3_0 = (RuleCall)cTitleAssignment_3.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cNarrativeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNarrativeNarrativeParserRuleCall_5_0 = (RuleCall)cNarrativeAssignment_5.eContents().get(0);
		private final Assignment cStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStepsStepParserRuleCall_6_0 = (RuleCall)cStepsAssignment_6.eContents().get(0);
		private final Assignment cExamplesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExamplesExampleParserRuleCall_7_0 = (RuleCall)cExamplesAssignment_7.eContents().get(0);
		
		//ScenarioOutline:
		//    tags+=Tag*
		//    'Scenario' 'Outline:'
		//    title=Title? EOL+
		//    narrative=Narrative?
		//    steps+=Step+
		//    examples+=Example+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag*
		//'Scenario' 'Outline:'
		//title=Title? EOL+
		//narrative=Narrative?
		//steps+=Step+
		//examples+=Example+
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'Scenario'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }
		
		//'Outline:'
		public Keyword getOutlineKeyword_2() { return cOutlineKeyword_2; }
		
		//title=Title?
		public Assignment getTitleAssignment_3() { return cTitleAssignment_3; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_3_0() { return cTitleTitleParserRuleCall_3_0; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_4() { return cEOLTerminalRuleCall_4; }
		
		//narrative=Narrative?
		public Assignment getNarrativeAssignment_5() { return cNarrativeAssignment_5; }
		
		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_5_0() { return cNarrativeNarrativeParserRuleCall_5_0; }
		
		//steps+=Step+
		public Assignment getStepsAssignment_6() { return cStepsAssignment_6; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_6_0() { return cStepsStepParserRuleCall_6_0; }
		
		//examples+=Example+
		public Assignment getExamplesAssignment_7() { return cExamplesAssignment_7; }
		
		//Example
		public RuleCall getExamplesExampleParserRuleCall_7_0() { return cExamplesExampleParserRuleCall_7_0; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordSTEP_KEYWORDTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionStepDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTableAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTableTableParserRuleCall_3_0_0 = (RuleCall)cTableAssignment_3_0.eContents().get(0);
		private final Assignment cCodeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cCodeDocStringParserRuleCall_3_1_0 = (RuleCall)cCodeAssignment_3_1.eContents().get(0);
		
		//Step:
		//    keyword=STEP_KEYWORD
		//    description=StepDescription EOL*
		//    (table=Table | code=DocString)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//keyword=STEP_KEYWORD
		//description=StepDescription EOL*
		//(table=Table | code=DocString)?
		public Group getGroup() { return cGroup; }
		
		//keyword=STEP_KEYWORD
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }
		
		//STEP_KEYWORD
		public RuleCall getKeywordSTEP_KEYWORDTerminalRuleCall_0_0() { return cKeywordSTEP_KEYWORDTerminalRuleCall_0_0; }
		
		//description=StepDescription
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//StepDescription
		public RuleCall getDescriptionStepDescriptionParserRuleCall_1_0() { return cDescriptionStepDescriptionParserRuleCall_1_0; }
		
		//EOL*
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
		
		//(table=Table | code=DocString)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//table=Table
		public Assignment getTableAssignment_3_0() { return cTableAssignment_3_0; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_3_0_0() { return cTableTableParserRuleCall_3_0_0; }
		
		//code=DocString
		public Assignment getCodeAssignment_3_1() { return cCodeAssignment_3_1; }
		
		//DocString
		public RuleCall getCodeDocStringParserRuleCall_3_1_0() { return cCodeDocStringParserRuleCall_3_1_0; }
	}
	public class ExampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Example");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cExamplesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cNarrativeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNarrativeNarrativeParserRuleCall_4_0 = (RuleCall)cNarrativeAssignment_4.eContents().get(0);
		private final Assignment cTableAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTableTableParserRuleCall_5_0 = (RuleCall)cTableAssignment_5.eContents().get(0);
		
		//Example:
		//    tags+=Tag*
		//    'Examples:'
		//    title=Title? EOL+
		//    narrative=Narrative?
		//    table=Table
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tags+=Tag*
		//'Examples:'
		//title=Title? EOL+
		//narrative=Narrative?
		//table=Table
		public Group getGroup() { return cGroup; }
		
		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }
		
		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }
		
		//'Examples:'
		public Keyword getExamplesKeyword_1() { return cExamplesKeyword_1; }
		
		//title=Title?
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }
		
		//Title
		public RuleCall getTitleTitleParserRuleCall_2_0() { return cTitleTitleParserRuleCall_2_0; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
		
		//narrative=Narrative?
		public Assignment getNarrativeAssignment_4() { return cNarrativeAssignment_4; }
		
		//Narrative
		public RuleCall getNarrativeNarrativeParserRuleCall_4_0() { return cNarrativeNarrativeParserRuleCall_4_0; }
		
		//table=Table
		public Assignment getTableAssignment_5() { return cTableAssignment_5; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_5_0() { return cTableTableParserRuleCall_5_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRowsTableRowParserRuleCall_1_0 = (RuleCall)cRowsAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Table: {Table}
		//    rows+=TableRow+
		//    EOL*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Table}
		//   rows+=TableRow+
		//   EOL*
		public Group getGroup() { return cGroup; }
		
		//{Table}
		public Action getTableAction_0() { return cTableAction_0; }
		
		//rows+=TableRow+
		public Assignment getRowsAssignment_1() { return cRowsAssignment_1; }
		
		//TableRow
		public RuleCall getRowsTableRowParserRuleCall_1_0() { return cRowsTableRowParserRuleCall_1_0; }
		
		//EOL*
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}
	public class TableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cColsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColsTableColParserRuleCall_1_0 = (RuleCall)cColsAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cEOLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//TableRow: {TableRow}
		//    cols+=TableCol+ '|' EOL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TableRow}
		//   cols+=TableCol+ '|' EOL
		public Group getGroup() { return cGroup; }
		
		//{TableRow}
		public Action getTableRowAction_0() { return cTableRowAction_0; }
		
		//cols+=TableCol+
		public Assignment getColsAssignment_1() { return cColsAssignment_1; }
		
		//TableCol
		public RuleCall getColsTableColParserRuleCall_1_0() { return cColsTableColParserRuleCall_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_3() { return cEOLTerminalRuleCall_3; }
	}
	public class TableColElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TableCol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableColAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCellAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCellTABLE_CELLTerminalRuleCall_1_0 = (RuleCall)cCellAssignment_1.eContents().get(0);
		
		//TableCol: {TableCol}
		//    cell=TABLE_CELL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TableCol}
		//   cell=TABLE_CELL
		public Group getGroup() { return cGroup; }
		
		//{TableCol}
		public Action getTableColAction_0() { return cTableColAction_0; }
		
		//cell=TABLE_CELL
		public Assignment getCellAssignment_1() { return cCellAssignment_1; }
		
		//TABLE_CELL
		public RuleCall getCellTABLE_CELLTerminalRuleCall_1_0() { return cCellTABLE_CELLTerminalRuleCall_1_0; }
	}
	public class DocStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.DocString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDocStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuotationMarkQuotationMarkQuotationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cTextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTextTextParserRuleCall_1_2_0 = (RuleCall)cTextAssignment_1_2.eContents().get(0);
		private final Keyword cQuotationMarkQuotationMarkQuotationMarkKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DocString: {DocString}
		//    ('"""' EOL -> text=Text '"""')
		//    // TODO alternate quote support in formatter
		//    // | ("'''" EOL -> text=Text? "'''")
		//    EOL*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DocString}
		//   ('"""' EOL -> text=Text '"""')
		//   // TODO alternate quote support in formatter
		//   // | ("'''" EOL -> text=Text? "'''")
		//   EOL*
		public Group getGroup() { return cGroup; }
		
		//{DocString}
		public Action getDocStringAction_0() { return cDocStringAction_0; }
		
		//('"""' EOL -> text=Text '"""')
		public Group getGroup_1() { return cGroup_1; }
		
		//'"""'
		public Keyword getQuotationMarkQuotationMarkQuotationMarkKeyword_1_0() { return cQuotationMarkQuotationMarkQuotationMarkKeyword_1_0; }
		
		//EOL
		public RuleCall getEOLTerminalRuleCall_1_1() { return cEOLTerminalRuleCall_1_1; }
		
		//-> text=Text
		public Assignment getTextAssignment_1_2() { return cTextAssignment_1_2; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_1_2_0() { return cTextTextParserRuleCall_1_2_0; }
		
		//'"""'
		public Keyword getQuotationMarkQuotationMarkQuotationMarkKeyword_1_3() { return cQuotationMarkQuotationMarkQuotationMarkKeyword_1_3; }
		
		//// TODO alternate quote support in formatter
		//// | ("'''" EOL -> text=Text? "'''")
		//EOL*
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cTAGNAMETerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		
		//Title:
		//    (WORD | INT | STRING | PLACEHOLDER)
		//    (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(WORD | INT | STRING | PLACEHOLDER)
		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		public Group getGroup() { return cGroup; }
		
		//(WORD | INT | STRING | PLACEHOLDER)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_0_0() { return cWORDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }
		
		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_0_3() { return cPLACEHOLDERTerminalRuleCall_0_3; }
		
		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_1_0() { return cWORDTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_1_3() { return cPLACEHOLDERTerminalRuleCall_1_3; }
		
		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_1_4() { return cSTEP_KEYWORDTerminalRuleCall_1_4; }
		
		//TAGNAME
		public RuleCall getTAGNAMETerminalRuleCall_1_5() { return cTAGNAMETerminalRuleCall_1_5; }
	}
	public class NarrativeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Narrative");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cWORDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cTAGNAMETerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Narrative:
		//    (
		//        (WORD | INT | STRING | PLACEHOLDER)
		//        (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		//        EOL+
		//    )+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(
		//    (WORD | INT | STRING | PLACEHOLDER)
		//    (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		//    EOL+
		//)+
		public Group getGroup() { return cGroup; }
		
		//(WORD | INT | STRING | PLACEHOLDER)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_0_0() { return cWORDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2() { return cSTRINGTerminalRuleCall_0_2; }
		
		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_0_3() { return cPLACEHOLDERTerminalRuleCall_0_3; }
		
		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_1_0() { return cWORDTerminalRuleCall_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2() { return cSTRINGTerminalRuleCall_1_2; }
		
		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_1_3() { return cPLACEHOLDERTerminalRuleCall_1_3; }
		
		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_1_4() { return cSTEP_KEYWORDTerminalRuleCall_1_4; }
		
		//TAGNAME
		public RuleCall getTAGNAMETerminalRuleCall_1_5() { return cTAGNAMETerminalRuleCall_1_5; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}
	public class StepDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.StepDescription");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPLACEHOLDERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTEP_KEYWORDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTAGNAMETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//StepDescription:
		//    (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_0() { return cWORDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//PLACEHOLDER
		public RuleCall getPLACEHOLDERTerminalRuleCall_3() { return cPLACEHOLDERTerminalRuleCall_3; }
		
		//STEP_KEYWORD
		public RuleCall getSTEP_KEYWORDTerminalRuleCall_4() { return cSTEP_KEYWORDTerminalRuleCall_4; }
		
		//TAGNAME
		public RuleCall getTAGNAMETerminalRuleCall_5() { return cTAGNAMETerminalRuleCall_5; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdTAGNAMETerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Tag: id=TAGNAME EOL?;
		@Override public ParserRule getRule() { return rule; }
		
		//id=TAGNAME EOL?
		public Group getGroup() { return cGroup; }
		
		//id=TAGNAME
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//TAGNAME
		public RuleCall getIdTAGNAMETerminalRuleCall_0_0() { return cIdTAGNAMETerminalRuleCall_0_0; }
		
		//EOL?
		public RuleCall getEOLTerminalRuleCall_1() { return cEOLTerminalRuleCall_1; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLinesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinesTextLineParserRuleCall_1_0 = (RuleCall)cLinesAssignment_1.eContents().get(0);
		
		//Text: {Text}
		//    lines+=TextLine*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Text}
		//   lines+=TextLine*
		public Group getGroup() { return cGroup; }
		
		//{Text}
		public Action getTextAction_0() { return cTextAction_0; }
		
		//lines+=TextLine*
		public Assignment getLinesAssignment_1() { return cLinesAssignment_1; }
		
		//TextLine
		public RuleCall getLinesTextLineParserRuleCall_1_0() { return cLinesTextLineParserRuleCall_1_0; }
	}
	public class TextLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TextLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextLineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTEXT_VALUEParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final RuleCall cEOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TextLine: {TextLine}
		//    value=TEXT_VALUE EOL+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TextLine}
		//   value=TEXT_VALUE EOL+
		public Group getGroup() { return cGroup; }
		
		//{TextLine}
		public Action getTextLineAction_0() { return cTextLineAction_0; }
		
		//value=TEXT_VALUE
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//TEXT_VALUE
		public RuleCall getValueTEXT_VALUEParserRuleCall_1_0() { return cValueTEXT_VALUEParserRuleCall_1_0; }
		
		//EOL+
		public RuleCall getEOLTerminalRuleCall_2() { return cEOLTerminalRuleCall_2; }
	}
	public class TEXT_VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TEXT_VALUE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTEXT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTEXT_LITERALParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//TEXT_VALUE returns ecore::EString:
		//    TEXT_LITERAL TEXT_LITERAL*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TEXT_LITERAL TEXT_LITERAL*
		public Group getGroup() { return cGroup; }
		
		//TEXT_LITERAL
		public RuleCall getTEXT_LITERALParserRuleCall_0() { return cTEXT_LITERALParserRuleCall_0; }
		
		//TEXT_LITERAL*
		public RuleCall getTEXT_LITERALParserRuleCall_1() { return cTEXT_LITERALParserRuleCall_1; }
	}
	public class TEXT_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TEXT_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cANY_OTHERTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TEXT_LITERAL: WORD
		//    | INT
		//    | STRING
		//    | ANY_OTHER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//WORD
		//   | INT
		//   | STRING
		//   | ANY_OTHER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WORD
		public RuleCall getWORDTerminalRuleCall_0() { return cWORDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_3() { return cANY_OTHERTerminalRuleCall_3; }
	}
	
	
	private final FeatureElements pFeature;
	private final AbstractScenarioElements pAbstractScenario;
	private final SectionElements pSection;
	private final BackgroundElements pBackground;
	private final ScenarioElements pScenario;
	private final ScenarioOutlineElements pScenarioOutline;
	private final StepElements pStep;
	private final ExampleElements pExample;
	private final TableElements pTable;
	private final TableRowElements pTableRow;
	private final TableColElements pTableCol;
	private final DocStringElements pDocString;
	private final TitleElements pTitle;
	private final NarrativeElements pNarrative;
	private final StepDescriptionElements pStepDescription;
	private final TagElements pTag;
	private final TextElements pText;
	private final TextLineElements pTextLine;
	private final TEXT_VALUEElements pTEXT_VALUE;
	private final TEXT_LITERALElements pTEXT_LITERAL;
	private final TerminalRule tINT;
	private final TerminalRule tSTEP_KEYWORD;
	private final TerminalRule tPLACEHOLDER;
	private final TerminalRule tTABLE_CELL;
	private final TerminalRule tSTRING;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tTAGNAME;
	private final TerminalRule tWORD;
	private final TerminalRule tWS;
	private final TerminalRule tEOL;
	private final TerminalRule tNL;
	private final TerminalRule tANY_OTHER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tLETTER;
	private final TerminalRule tASCII_SPACE;
	private final TerminalRule tASCII_DIGIT;
	private final TerminalRule tASCII_SYMBOLS;
	private final TerminalRule tLATIN_ALPHABET;
	
	private final Grammar grammar;

	@Inject
	public CucumberGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pFeature = new FeatureElements();
		this.pAbstractScenario = new AbstractScenarioElements();
		this.pSection = new SectionElements();
		this.pBackground = new BackgroundElements();
		this.pScenario = new ScenarioElements();
		this.pScenarioOutline = new ScenarioOutlineElements();
		this.pStep = new StepElements();
		this.pExample = new ExampleElements();
		this.pTable = new TableElements();
		this.pTableRow = new TableRowElements();
		this.pTableCol = new TableColElements();
		this.pDocString = new DocStringElements();
		this.pTitle = new TitleElements();
		this.pNarrative = new NarrativeElements();
		this.pStepDescription = new StepDescriptionElements();
		this.pTag = new TagElements();
		this.pText = new TextElements();
		this.pTextLine = new TextLineElements();
		this.pTEXT_VALUE = new TEXT_VALUEElements();
		this.pTEXT_LITERAL = new TEXT_LITERALElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.INT");
		this.tSTEP_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.STEP_KEYWORD");
		this.tPLACEHOLDER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.PLACEHOLDER");
		this.tTABLE_CELL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TABLE_CELL");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.STRING");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.SL_COMMENT");
		this.tTAGNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.TAGNAME");
		this.tWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.WORD");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.WS");
		this.tEOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.EOL");
		this.tNL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.NL");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.ANY_OTHER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.DIGIT");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.LETTER");
		this.tASCII_SPACE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.ASCII_SPACE");
		this.tASCII_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.ASCII_DIGIT");
		this.tASCII_SYMBOLS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.ASCII_SYMBOLS");
		this.tLATIN_ALPHABET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "mbt.Cucumber.LATIN_ALPHABET");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("mbt.Cucumber".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Feature:
	//    tags+=Tag*
	//    'Feature:'
	//    title=Title EOL+
	//    narrative=Narrative?
	//    background=Background?
	//    scenarios+=AbstractScenario+
	//;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	///**
	// * Base class for Scenario implementations.
	// * A Scenario is any type with the following structure:
	// *
	// * tags+=Tag*
	// * 'Scenario:'
	// * title=Title? EOL+
	// * narrative=Narrative?
	// * steps+=Step+;
	// */
	//AbstractScenario: Scenario
	//    | ScenarioOutline
	//    | Background
	//;
	public AbstractScenarioElements getAbstractScenarioAccess() {
		return pAbstractScenario;
	}
	
	public ParserRule getAbstractScenarioRule() {
		return getAbstractScenarioAccess().getRule();
	}
	
	///**
	// * A Section is a generic element with the structure:
	// *
	// * tags+=Tag*
	// * 'Keyword:'
	// * title=Title? EOL+
	// * narrative=Narrative?
	// */
	//Section: Feature
	//    | Background
	//    | AbstractScenario
	//    | Example
	//;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}
	
	//Background:
	//    tags+=Tag*
	//    'Background:'
	//    title=Title? EOL+
	//    narrative=Narrative?
	//    steps+=Step+
	//;
	public BackgroundElements getBackgroundAccess() {
		return pBackground;
	}
	
	public ParserRule getBackgroundRule() {
		return getBackgroundAccess().getRule();
	}
	
	//Scenario:
	//    tags+=Tag*
	//    'Scenario:'
	//    title=Title? EOL+
	//    narrative=Narrative?
	//    steps+=Step+
	//;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//ScenarioOutline:
	//    tags+=Tag*
	//    'Scenario' 'Outline:'
	//    title=Title? EOL+
	//    narrative=Narrative?
	//    steps+=Step+
	//    examples+=Example+
	//;
	public ScenarioOutlineElements getScenarioOutlineAccess() {
		return pScenarioOutline;
	}
	
	public ParserRule getScenarioOutlineRule() {
		return getScenarioOutlineAccess().getRule();
	}
	
	//Step:
	//    keyword=STEP_KEYWORD
	//    description=StepDescription EOL*
	//    (table=Table | code=DocString)?
	//;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//Example:
	//    tags+=Tag*
	//    'Examples:'
	//    title=Title? EOL+
	//    narrative=Narrative?
	//    table=Table
	//;
	public ExampleElements getExampleAccess() {
		return pExample;
	}
	
	public ParserRule getExampleRule() {
		return getExampleAccess().getRule();
	}
	
	//Table: {Table}
	//    rows+=TableRow+
	//    EOL*
	//;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//TableRow: {TableRow}
	//    cols+=TableCol+ '|' EOL
	//;
	public TableRowElements getTableRowAccess() {
		return pTableRow;
	}
	
	public ParserRule getTableRowRule() {
		return getTableRowAccess().getRule();
	}
	
	//TableCol: {TableCol}
	//    cell=TABLE_CELL
	//;
	public TableColElements getTableColAccess() {
		return pTableCol;
	}
	
	public ParserRule getTableColRule() {
		return getTableColAccess().getRule();
	}
	
	//DocString: {DocString}
	//    ('"""' EOL -> text=Text '"""')
	//    // TODO alternate quote support in formatter
	//    // | ("'''" EOL -> text=Text? "'''")
	//    EOL*
	//;
	public DocStringElements getDocStringAccess() {
		return pDocString;
	}
	
	public ParserRule getDocStringRule() {
		return getDocStringAccess().getRule();
	}
	
	//Title:
	//    (WORD | INT | STRING | PLACEHOLDER)
	//    (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
	//;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Narrative:
	//    (
	//        (WORD | INT | STRING | PLACEHOLDER)
	//        (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)*
	//        EOL+
	//    )+
	//;
	public NarrativeElements getNarrativeAccess() {
		return pNarrative;
	}
	
	public ParserRule getNarrativeRule() {
		return getNarrativeAccess().getRule();
	}
	
	//StepDescription:
	//    (WORD | INT | STRING | PLACEHOLDER | STEP_KEYWORD | TAGNAME)+
	//;
	public StepDescriptionElements getStepDescriptionAccess() {
		return pStepDescription;
	}
	
	public ParserRule getStepDescriptionRule() {
		return getStepDescriptionAccess().getRule();
	}
	
	//Tag: id=TAGNAME EOL?;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//Text: {Text}
	//    lines+=TextLine*
	//;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//TextLine: {TextLine}
	//    value=TEXT_VALUE EOL+
	//;
	public TextLineElements getTextLineAccess() {
		return pTextLine;
	}
	
	public ParserRule getTextLineRule() {
		return getTextLineAccess().getRule();
	}
	
	//TEXT_VALUE returns ecore::EString:
	//    TEXT_LITERAL TEXT_LITERAL*
	//;
	public TEXT_VALUEElements getTEXT_VALUEAccess() {
		return pTEXT_VALUE;
	}
	
	public ParserRule getTEXT_VALUERule() {
		return getTEXT_VALUEAccess().getRule();
	}
	
	//TEXT_LITERAL: WORD
	//    | INT
	//    | STRING
	//    | ANY_OTHER
	//;
	public TEXT_LITERALElements getTEXT_LITERALAccess() {
		return pTEXT_LITERAL;
	}
	
	public ParserRule getTEXT_LITERALRule() {
		return getTEXT_LITERALAccess().getRule();
	}
	
	//terminal INT:
	//    '-'?
	//    ('0'..'9')+
	//    ('.' ('0'..'9')+)?
	//;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STEP_KEYWORD: ('Given' | 'When' | 'Then' | 'And' | 'But' | '*') (' ' | '\t')+;
	public TerminalRule getSTEP_KEYWORDRule() {
		return tSTEP_KEYWORD;
	}
	
	//terminal PLACEHOLDER: '<' !('>' | ' ' | '\t' | '\n' | '\r')+ '>';
	public TerminalRule getPLACEHOLDERRule() {
		return tPLACEHOLDER;
	}
	
	//terminal TABLE_CELL: '|' !('|' | '\n' | '\r')*;
	public TerminalRule getTABLE_CELLRule() {
		return tTABLE_CELL;
	}
	
	//terminal STRING:
	//    '"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"' | '\r' | '\n'))* '"' |
	//    "'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'" | '\r' | '\n'))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal SL_COMMENT: '#' !('\n' | '\r')* NL;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal TAGNAME: '@' !(' ' | '\t' | '\n' | '\r')+ ;
	public TerminalRule getTAGNAMERule() {
		return tTAGNAME;
	}
	
	//terminal WORD:
	//    !('@' | '|' | ' ' | '\t' | '\n' | '\r')
	//    !(' ' | '\t' | '\n' | '\r')*
	//;
	public TerminalRule getWORDRule() {
		return tWORD;
	}
	
	//terminal WS: (' ' | '\t');
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal EOL: NL;
	public TerminalRule getEOLRule() {
		return tEOL;
	}
	
	//terminal fragment NL: ('\r'? '\n'?);
	public TerminalRule getNLRule() {
		return tNL;
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//// ----------------------------------------------------------
	////
	//// Unicode Ranges
	////
	//// ----------------------------------------------------------
	//terminal fragment DIGIT: ASCII_DIGIT;
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment LETTER: LATIN_ALPHABET;
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//// Basic Latin
	//////
	//terminal fragment ASCII_SPACE: '\u0020';
	public TerminalRule getASCII_SPACERule() {
		return tASCII_SPACE;
	}
	
	//terminal fragment ASCII_DIGIT: ('\u0030'..'\u0039');
	public TerminalRule getASCII_DIGITRule() {
		return tASCII_DIGIT;
	}
	
	//// all ascii chars other than letters, digits, space, or control codes
	//terminal fragment ASCII_SYMBOLS: ('\u0021'..'\u002F')
	//    | ('\u003A'..'\u0040')
	//    | ('\u005B'..'\u0060')
	//    | ('\u007B'..'\u007E')
	//;
	public TerminalRule getASCII_SYMBOLSRule() {
		return tASCII_SYMBOLS;
	}
	
	//terminal fragment LATIN_ALPHABET: ('\u0041'..'\u005A')
	//    | ('\u0061'..'\u007A')
	//;
	public TerminalRule getLATIN_ALPHABETRule() {
		return tLATIN_ALPHABET;
	}
}
