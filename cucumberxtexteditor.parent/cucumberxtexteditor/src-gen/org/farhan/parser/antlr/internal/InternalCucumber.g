/*
 * generated by Xtext 2.32.0
 */
grammar InternalCucumber;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.farhan.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.farhan.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.farhan.services.CucumberGrammarAccess;

}

@parser::members {

 	private CucumberGrammarAccess grammarAccess;

    public InternalCucumberParser(TokenStream input, CucumberGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Feature";
   	}

   	@Override
   	protected CucumberGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getTagsParserRuleCall_0());
		}
		ruleTags
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='Feature:'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeatureAccess().getFeatureKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getTitleSentenceParserRuleCall_2_0());
				}
				lv_title_2_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"title",
						lv_title_2_0,
						"org.farhan.Cucumber.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getDescriptionDescriptionParserRuleCall_3_0());
				}
				lv_description_3_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"description",
						lv_description_3_0,
						"org.farhan.Cucumber.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getBackgroundBackgroundParserRuleCall_4_0());
				}
				lv_background_4_0=ruleBackground
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"background",
						lv_background_4_0,
						"org.farhan.Cucumber.Background");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getScenariosScenarioParserRuleCall_5_0());
				}
				lv_scenarios_5_0=ruleScenario
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					add(
						$current,
						"scenarios",
						lv_scenarios_5_0,
						"org.farhan.Cucumber.Scenario");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleBackground
entryRuleBackground returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackgroundRule()); }
	iv_ruleBackground=ruleBackground
	{ $current=$iv_ruleBackground.current; }
	EOF;

// Rule Background
ruleBackground returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Background:'
		{
			newLeafNode(otherlv_0, grammarAccess.getBackgroundAccess().getBackgroundKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBackgroundAccess().getTitleSentenceParserRuleCall_1_0());
				}
				lv_title_1_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBackgroundRule());
					}
					set(
						$current,
						"title",
						lv_title_1_0,
						"org.farhan.Cucumber.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBackgroundAccess().getDescriptionDescriptionParserRuleCall_2_0());
				}
				lv_description_2_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBackgroundRule());
					}
					set(
						$current,
						"description",
						lv_description_2_0,
						"org.farhan.Cucumber.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBackgroundAccess().getStepsStepParserRuleCall_3_0());
				}
				lv_steps_3_0=ruleStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBackgroundRule());
					}
					add(
						$current,
						"steps",
						lv_steps_3_0,
						"org.farhan.Cucumber.Step");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	iv_ruleScenario=ruleScenario
	{ $current=$iv_ruleScenario.current; }
	EOF;

// Rule Scenario
ruleScenario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getScenarioAccess().getTagsParserRuleCall_0());
		}
		ruleTags
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1='Scenario:'
		{
			newLeafNode(otherlv_1, grammarAccess.getScenarioAccess().getScenarioKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getTitleSentenceParserRuleCall_2_0());
				}
				lv_title_2_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					set(
						$current,
						"title",
						lv_title_2_0,
						"org.farhan.Cucumber.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getDescriptionDescriptionParserRuleCall_3_0());
				}
				lv_description_3_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					set(
						$current,
						"description",
						lv_description_3_0,
						"org.farhan.Cucumber.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getStepsStepParserRuleCall_4_0());
				}
				lv_steps_4_0=ruleStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"steps",
						lv_steps_4_0,
						"org.farhan.Cucumber.Step");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_keyword_0_1='Given'
					{
						newLeafNode(lv_keyword_0_1, grammarAccess.getStepAccess().getKeywordGivenKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_1, null);
					}
					    |
					lv_keyword_0_2='When'
					{
						newLeafNode(lv_keyword_0_2, grammarAccess.getStepAccess().getKeywordWhenKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_2, null);
					}
					    |
					lv_keyword_0_3='Then'
					{
						newLeafNode(lv_keyword_0_3, grammarAccess.getStepAccess().getKeywordThenKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_3, null);
					}
					    |
					lv_keyword_0_4='And'
					{
						newLeafNode(lv_keyword_0_4, grammarAccess.getStepAccess().getKeywordAndKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_4, null);
					}
					    |
					lv_keyword_0_5='But'
					{
						newLeafNode(lv_keyword_0_5, grammarAccess.getStepAccess().getKeywordButKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_5, null);
					}
					    |
					lv_keyword_0_6='*'
					{
						newLeafNode(lv_keyword_0_6, grammarAccess.getStepAccess().getKeywordAsteriskKeyword_0_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStepRule());
						}
						setWithLastConsumed($current, "keyword", lv_keyword_0_6, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStepAccess().getTitleSentenceParserRuleCall_1_0());
				}
				lv_title_1_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepRule());
					}
					set(
						$current,
						"title",
						lv_title_1_0,
						"org.farhan.Cucumber.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDescriptionAccess().getDescriptionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDescriptionAccess().getSentencesSentenceParserRuleCall_1_0());
				}
				lv_sentences_1_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDescriptionRule());
					}
					add(
						$current,
						"sentences",
						lv_sentences_1_0,
						"org.farhan.Cucumber.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTags
entryRuleTags returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTagsRule()); }
	iv_ruleTags=ruleTags
	{ $current=$iv_ruleTags.current.getText(); }
	EOF;

// Rule Tags
ruleTags returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_TAG_0=RULE_TAG
			{
				$current.merge(this_TAG_0);
			}
			{
				newLeafNode(this_TAG_0, grammarAccess.getTagsAccess().getTAGTerminalRuleCall_0());
			}
		)*
		(
			this_EOL_1=RULE_EOL
			{
				$current.merge(this_EOL_1);
			}
			{
				newLeafNode(this_EOL_1, grammarAccess.getTagsAccess().getEOLTerminalRuleCall_1());
			}
		)?
	)
;

// Entry rule entryRuleSentence
entryRuleSentence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	iv_ruleSentence=ruleSentence
	{ $current=$iv_ruleSentence.current.getText(); }
	EOF;

// Rule Sentence
ruleSentence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_WORD_0=RULE_WORD
			{
				$current.merge(this_WORD_0);
			}
			{
				newLeafNode(this_WORD_0, grammarAccess.getSentenceAccess().getWORDTerminalRuleCall_0());
			}
		)+
		(
			this_EOL_1=RULE_EOL
			{
				$current.merge(this_EOL_1);
			}
			{
				newLeafNode(this_EOL_1, grammarAccess.getSentenceAccess().getEOLTerminalRuleCall_1());
			}
		)?
	)
;

RULE_WS : (' '|'\t')+;

RULE_EOL : ('\r'|'\n')+;

RULE_COMMENT : '#' ~(('\r'|'\n'))* RULE_EOL;

RULE_WORD : ('a'..'z'|'A'..'Z'|'0'..'9'|'\'')+;

RULE_TAG : '@' RULE_WORD;
