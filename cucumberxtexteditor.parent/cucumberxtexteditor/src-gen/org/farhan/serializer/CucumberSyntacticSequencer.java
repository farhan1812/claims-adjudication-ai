/*
 * generated by Xtext 2.32.0
 */
package org.farhan.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.farhan.services.CucumberGrammarAccess;

@SuppressWarnings("all")
public class CucumberSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CucumberGrammarAccess grammarAccess;
	protected AbstractElementAlias match_DocString_SentenceParserRuleCall_1_1_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CucumberGrammarAccess) access;
		match_DocString_SentenceParserRuleCall_1_1_a = new TokenAlias(true, true, grammarAccess.getDocStringAccess().getSentenceParserRuleCall_1_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEOLRule())
			return getEOLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSentenceRule())
			return getSentenceToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTagsRule())
			return getTagsToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EOL:
	 * 	('\r' | '\n')+;
	 */
	protected String getEOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\r";
	}
	
	/**
	 * Sentence:
	 * 	WORD+ EOL?;
	 */
	protected String getSentenceToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Tags:
	 * 	TAG* EOL?;
	 */
	protected String getTagsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_DocString_SentenceParserRuleCall_1_1_a.equals(syntax))
				emit_DocString_SentenceParserRuleCall_1_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     Sentence*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '"""' (ambiguity) '"""' EOL (rule start)
	 
	 * </pre>
	 */
	protected void emit_DocString_SentenceParserRuleCall_1_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
