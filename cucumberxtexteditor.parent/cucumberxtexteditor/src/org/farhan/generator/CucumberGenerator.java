/**
 * generated by Xtext 2.32.0
 */
package org.farhan.generator;

import com.google.common.collect.Iterables;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.generator.OutputConfiguration;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.farhan.CucumberStandaloneSetup;
import org.farhan.cucumber.AbstractScenario;
import org.farhan.cucumber.Cell;
import org.farhan.cucumber.CucumberFactory;
import org.farhan.cucumber.Examples;
import org.farhan.cucumber.ExamplesTable;
import org.farhan.cucumber.Feature;
import org.farhan.cucumber.Row;
import org.farhan.cucumber.ScenarioOutline;
import org.farhan.cucumber.Step;
import org.farhan.cucumber.StepTable;
import org.farhan.validation.StepWrapper;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CucumberGenerator implements IGenerator2 {

	@Override
	public void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	}

	@Override
	public void afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	}

	@Override
	public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {

		Feature theFeature = (Feature) resource.getContents().get(0);
		// TODO test if this code is called if the feature is invalid
		for (AbstractScenario scenario : theFeature.getAbstractScenarios()) {
			// TODO validatate that each scenario has at least one component. Part of this
			// validation is checking the background
			String component = "";
			HashMap<String, String> objects = new HashMap<String, String>();
			for (Step step : scenario.getSteps()) {
				try {
					// TODO generate should just get an fsa and step.
					// this should be inside StepDefGenerator.generate because for any step,
					// it should be able to figure out what the component name is or the path of the
					// object like when called for a quick fix. In that case, it'll need to get
					// access to the parent like so: AbstractScenario as = (AbstractScenario)
					// step.eContainer();
					component = getComponent(step.getName(), component);
					String object = getObject(step.getName(), objects);
					EList<Cell> header = getHeader(step);
					StepDefGenerator.generate(fsa, component, object, step.getName(), header);
				} catch (Exception e) {
					System.out.println("There was a problem generating for step: " + step.getName());
					System.out.println(getStackTraceAsString(e));
				}
			}
		}
	}

	private String getComponent(String name, String previousComponent) {
		String component = previousComponent;
		if (!StepWrapper.getComponentName(name).isBlank()) {
			component = StepWrapper.getComponentName(name) + " " + StepWrapper.getComponentType(name);
		}
		return component;
	}

	private String getObject(String name, HashMap<String, String> objects) {
		String object = StepWrapper.getObjectName(name) + " " + StepWrapper.getObjectType(name);
		// TODO add getObjectPath to StepWrapper.
		// The (appname apptype, pathtoobject/)?objectname objecttype(, sectionname) is
		// predicate
		String[] objectParts = object.split("/");
		String objectKey = objectParts[objectParts.length - 1];

		String objectWithPath = objects.get(objectKey);
		if (objectWithPath == null) {
			objects.put(objectKey, object);
			return object;
		} else {
			if (objectKey.contentEquals(object)) {
				return objectWithPath;
			} else {
				objects.put(objectKey, object);
				return object;
			}
		}
	}

	private EList<Cell> getHeader(Step step) {
		StepTable stepTable = step.getTheStepTable();
		if (stepTable != null) {
			return stepTable.getRows().get(0).getCells();
		} else {
			return null;
		}
	}

	private String getStackTraceAsString(Exception e) {
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		return sw.toString();
	}
}
