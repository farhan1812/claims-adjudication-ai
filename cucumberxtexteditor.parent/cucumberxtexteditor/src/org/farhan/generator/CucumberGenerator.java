/**
 * generated by Xtext 2.32.0
 */
package org.farhan.generator;

import com.google.common.collect.Iterables;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.farhan.CucumberStandaloneSetup;
import org.farhan.cucumber.AbstractScenario;
import org.farhan.cucumber.Feature;
import org.farhan.cucumber.Step;
import org.farhan.validation.StepWrapper;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CucumberGenerator implements IGenerator2 {

	@Override
	public void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	}

	@Override
	public void afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	}

	@Override
	public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {

		String component = "";
		String object = "";

		Feature theFeature = (Feature) resource.getContents().get(0);
		// TODO test if this code is called if the feature is invalid
		for (AbstractScenario scenario : theFeature.getAbstractScenarios()) {
			// TODO validatate that each scenario has at least one app
			for (Step step : scenario.getSteps()) {
				// TODO surround the step with try catch and maybe log an error?
				component = setComponent(step.getName(), component);
				object = setObject(step.getName());
				fsa.generateFile(getObjectFilename(component, object),
						MyOutputConfigurationProvider.DEFAULT_OUTPUT_ONCE, AdocFileGenerator.getContent(
								getObjectFilename(component, object), component, object, step.getName(), ""));
			}
		}
	}

	private String setObject(String name) {
		String object = "";
		object = StepWrapper.getObjectName(name) + " " + StepWrapper.getObjectType(name);
		return object;
	}

	private String setComponent(String name, String previousComponent) {
		String component = previousComponent;
		if (!StepWrapper.getComponentName(name).isBlank()) {
			component = StepWrapper.getComponentName(name) + " " + StepWrapper.getComponentType(name);
		}
		return component;
	}

	private String getObjectFilename(String component, String object) {
		return component + "/" + object + ".adoc";
	}

	private String getFeatureFileName(final Resource res) {
		String name = res.getURI().lastSegment();
		return StringExtensions.toFirstUpper(name.substring(0, name.indexOf(".")));
	}
}
