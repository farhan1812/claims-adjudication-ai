/*
 * generated by Xtext 2.32.0
 */
package org.farhan.validation;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.farhan.cucumber.AbstractScenario;
import org.farhan.cucumber.CucumberPackage;
import org.farhan.cucumber.Feature;
import org.farhan.cucumber.Given;
import org.farhan.cucumber.Scenario;
import org.farhan.cucumber.Step;
import org.farhan.cucumber.Then;
import org.farhan.cucumber.When;
import org.farhan.mbt.graph.validation.EdgeValidator;
import org.farhan.mbt.graph.validation.VerticeValidator;

public class CucumberValidator extends AbstractCucumberValidator {

	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_STEP_TYPE = "invalidStepType";

	// Validate if the Step is a valid vertice with input or edge, FAST is when the
	// file is modified
	@Check(CheckType.FAST)
	public void checkStepName(Step step) {

		// TODO the quickfix here is to identify which regex is broken and put an
		// example in place

		if ((step instanceof Given || step instanceof Then) && !VerticeValidator.isValid(step.getName())) {
			error(VerticeValidator.getErrorMessage(), CucumberPackage.Literals.STEP__NAME, INVALID_NAME);
		} else if (step instanceof When && !EdgeValidator.isValid(step.getName())) {
			error(EdgeValidator.getErrorMessage(), CucumberPackage.Literals.STEP__NAME, INVALID_NAME);
		} else {
			error("Unknown step type, can't tell if this is a Given/Then or a When.",
					CucumberPackage.Literals.STEP__NAME, INVALID_STEP_TYPE);
		}

		// TODO what about And, But, *.
		AbstractScenario as = (AbstractScenario) step.eContainer();
		// TODO assumes step 0 is never And. Check that as step validation
		// Use something like this to determine if this is a GWT:
		// as.getSteps().indexOf(step)

		if (step.getTheStepTable() != null) {
			// TODO Add table column row validation, each row should have the max number of
			// columns
		}
	}

	// Validate if the Abstract Scenario is a valid path, NORMAL is when the file is
	// saved
	@Check(CheckType.NORMAL)
	public void checkScenario(Scenario scenario) {

		// TODO validate that state and transition validation are applied to Given/Then
		// and When respectively
		// For And, But and *, the last GWT should apply. The quickfix here is to change
		// the keyword
		// TODO also check that there's a sequence of GWT or G(G|A|B)*W(W|A|B)*T(T|A|B)*
		// and not (G|W|T|A|B)*

		if (!Character.isUpperCase(scenario.getName().charAt(0))) {
			warning("Scenario name should start with a capital", CucumberPackage.Literals.ABSTRACT_SCENARIO__NAME,
					INVALID_NAME);
		}
	}

	// Validate if the Feature is a valid graph, EXPENSIVE is when the
	// validation menu item is selected
	@Check(CheckType.EXPENSIVE)
	public void checkFeature(Feature feature) {
		// TODO validate that feature file name and feature name are the same.

		if (!Character.isUpperCase(feature.getName().charAt(0))) {
			warning("Feature name should start with a capital", CucumberPackage.Literals.FEATURE__NAME, INVALID_NAME);
		}

	}

}
