/*
 * generated by Xtext 2.32.0
 */
package org.farhan.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.farhan.ide.contentassist.antlr.internal.InternalCucumberParser;
import org.farhan.services.CucumberGrammarAccess;

public class CucumberParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CucumberGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CucumberGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStepAccess().getKeywordAlternatives_0_0(), "rule__Step__KeywordAlternatives_0_0");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
			builder.put(grammarAccess.getTagAccess().getGroup(), "rule__Tag__Group__0");
			builder.put(grammarAccess.getSentenceAccess().getGroup(), "rule__Sentence__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getTagsAssignment_0(), "rule__Feature__TagsAssignment_0");
			builder.put(grammarAccess.getFeatureAccess().getTitleAssignment_3(), "rule__Feature__TitleAssignment_3");
			builder.put(grammarAccess.getFeatureAccess().getScenariosAssignment_4(), "rule__Feature__ScenariosAssignment_4");
			builder.put(grammarAccess.getScenarioAccess().getTagsAssignment_0(), "rule__Scenario__TagsAssignment_0");
			builder.put(grammarAccess.getScenarioAccess().getTitleAssignment_3(), "rule__Scenario__TitleAssignment_3");
			builder.put(grammarAccess.getScenarioAccess().getStepsAssignment_4(), "rule__Scenario__StepsAssignment_4");
			builder.put(grammarAccess.getStepAccess().getKeywordAssignment_0(), "rule__Step__KeywordAssignment_0");
			builder.put(grammarAccess.getStepAccess().getTitleAssignment_1(), "rule__Step__TitleAssignment_1");
			builder.put(grammarAccess.getDescriptionAccess().getSentencesAssignment(), "rule__Description__SentencesAssignment");
			builder.put(grammarAccess.getTagAccess().getTitleAssignment_0(), "rule__Tag__TitleAssignment_0");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CucumberGrammarAccess grammarAccess;

	@Override
	protected InternalCucumberParser createParser() {
		InternalCucumberParser result = new InternalCucumberParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] {  };
	}

	public CucumberGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CucumberGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
