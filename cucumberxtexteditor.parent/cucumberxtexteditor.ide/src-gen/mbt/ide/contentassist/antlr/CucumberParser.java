/*
 * generated by Xtext 2.32.0
 */
package mbt.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import mbt.ide.contentassist.antlr.internal.InternalCucumberParser;
import mbt.services.CucumberGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CucumberParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CucumberGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CucumberGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractScenarioAccess().getAlternatives(), "rule__AbstractScenario__Alternatives");
			builder.put(grammarAccess.getSectionAccess().getAlternatives(), "rule__Section__Alternatives");
			builder.put(grammarAccess.getStepAccess().getAlternatives_3(), "rule__Step__Alternatives_3");
			builder.put(grammarAccess.getTitleAccess().getAlternatives_0(), "rule__Title__Alternatives_0");
			builder.put(grammarAccess.getTitleAccess().getAlternatives_1(), "rule__Title__Alternatives_1");
			builder.put(grammarAccess.getNarrativeAccess().getAlternatives_0(), "rule__Narrative__Alternatives_0");
			builder.put(grammarAccess.getNarrativeAccess().getAlternatives_1(), "rule__Narrative__Alternatives_1");
			builder.put(grammarAccess.getStepDescriptionAccess().getAlternatives(), "rule__StepDescription__Alternatives");
			builder.put(grammarAccess.getTEXT_LITERALAccess().getAlternatives(), "rule__TEXT_LITERAL__Alternatives");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getBackgroundAccess().getGroup(), "rule__Background__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getScenarioOutlineAccess().getGroup(), "rule__ScenarioOutline__Group__0");
			builder.put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
			builder.put(grammarAccess.getExampleAccess().getGroup(), "rule__Example__Group__0");
			builder.put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
			builder.put(grammarAccess.getTableRowAccess().getGroup(), "rule__TableRow__Group__0");
			builder.put(grammarAccess.getTableColAccess().getGroup(), "rule__TableCol__Group__0");
			builder.put(grammarAccess.getDocStringAccess().getGroup(), "rule__DocString__Group__0");
			builder.put(grammarAccess.getDocStringAccess().getGroup_1(), "rule__DocString__Group_1__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getNarrativeAccess().getGroup(), "rule__Narrative__Group__0");
			builder.put(grammarAccess.getTagAccess().getGroup(), "rule__Tag__Group__0");
			builder.put(grammarAccess.getTextAccess().getGroup(), "rule__Text__Group__0");
			builder.put(grammarAccess.getTextLineAccess().getGroup(), "rule__TextLine__Group__0");
			builder.put(grammarAccess.getTEXT_VALUEAccess().getGroup(), "rule__TEXT_VALUE__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getTagsAssignment_0(), "rule__Feature__TagsAssignment_0");
			builder.put(grammarAccess.getFeatureAccess().getTitleAssignment_2(), "rule__Feature__TitleAssignment_2");
			builder.put(grammarAccess.getFeatureAccess().getNarrativeAssignment_4(), "rule__Feature__NarrativeAssignment_4");
			builder.put(grammarAccess.getFeatureAccess().getBackgroundAssignment_5(), "rule__Feature__BackgroundAssignment_5");
			builder.put(grammarAccess.getFeatureAccess().getScenariosAssignment_6(), "rule__Feature__ScenariosAssignment_6");
			builder.put(grammarAccess.getBackgroundAccess().getTagsAssignment_0(), "rule__Background__TagsAssignment_0");
			builder.put(grammarAccess.getBackgroundAccess().getTitleAssignment_2(), "rule__Background__TitleAssignment_2");
			builder.put(grammarAccess.getBackgroundAccess().getNarrativeAssignment_4(), "rule__Background__NarrativeAssignment_4");
			builder.put(grammarAccess.getBackgroundAccess().getStepsAssignment_5(), "rule__Background__StepsAssignment_5");
			builder.put(grammarAccess.getScenarioAccess().getTagsAssignment_0(), "rule__Scenario__TagsAssignment_0");
			builder.put(grammarAccess.getScenarioAccess().getTitleAssignment_2(), "rule__Scenario__TitleAssignment_2");
			builder.put(grammarAccess.getScenarioAccess().getNarrativeAssignment_4(), "rule__Scenario__NarrativeAssignment_4");
			builder.put(grammarAccess.getScenarioAccess().getStepsAssignment_5(), "rule__Scenario__StepsAssignment_5");
			builder.put(grammarAccess.getScenarioOutlineAccess().getTagsAssignment_0(), "rule__ScenarioOutline__TagsAssignment_0");
			builder.put(grammarAccess.getScenarioOutlineAccess().getTitleAssignment_3(), "rule__ScenarioOutline__TitleAssignment_3");
			builder.put(grammarAccess.getScenarioOutlineAccess().getNarrativeAssignment_5(), "rule__ScenarioOutline__NarrativeAssignment_5");
			builder.put(grammarAccess.getScenarioOutlineAccess().getStepsAssignment_6(), "rule__ScenarioOutline__StepsAssignment_6");
			builder.put(grammarAccess.getScenarioOutlineAccess().getExamplesAssignment_7(), "rule__ScenarioOutline__ExamplesAssignment_7");
			builder.put(grammarAccess.getStepAccess().getKeywordAssignment_0(), "rule__Step__KeywordAssignment_0");
			builder.put(grammarAccess.getStepAccess().getDescriptionAssignment_1(), "rule__Step__DescriptionAssignment_1");
			builder.put(grammarAccess.getStepAccess().getTableAssignment_3_0(), "rule__Step__TableAssignment_3_0");
			builder.put(grammarAccess.getStepAccess().getCodeAssignment_3_1(), "rule__Step__CodeAssignment_3_1");
			builder.put(grammarAccess.getExampleAccess().getTagsAssignment_0(), "rule__Example__TagsAssignment_0");
			builder.put(grammarAccess.getExampleAccess().getTitleAssignment_2(), "rule__Example__TitleAssignment_2");
			builder.put(grammarAccess.getExampleAccess().getNarrativeAssignment_4(), "rule__Example__NarrativeAssignment_4");
			builder.put(grammarAccess.getExampleAccess().getTableAssignment_5(), "rule__Example__TableAssignment_5");
			builder.put(grammarAccess.getTableAccess().getRowsAssignment_1(), "rule__Table__RowsAssignment_1");
			builder.put(grammarAccess.getTableRowAccess().getColsAssignment_1(), "rule__TableRow__ColsAssignment_1");
			builder.put(grammarAccess.getTableColAccess().getCellAssignment_1(), "rule__TableCol__CellAssignment_1");
			builder.put(grammarAccess.getDocStringAccess().getTextAssignment_1_2(), "rule__DocString__TextAssignment_1_2");
			builder.put(grammarAccess.getTagAccess().getIdAssignment_0(), "rule__Tag__IdAssignment_0");
			builder.put(grammarAccess.getTextAccess().getLinesAssignment_1(), "rule__Text__LinesAssignment_1");
			builder.put(grammarAccess.getTextLineAccess().getValueAssignment_1(), "rule__TextLine__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CucumberGrammarAccess grammarAccess;

	@Override
	protected InternalCucumberParser createParser() {
		InternalCucumberParser result = new InternalCucumberParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public CucumberGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CucumberGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
