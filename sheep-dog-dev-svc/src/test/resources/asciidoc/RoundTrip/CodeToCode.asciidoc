ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

:tags: debug
= Code To Code

[background="true"]
== Background: Create a feature file

The formatting of the data and example tables is intentionally different to make sure that the file is regenerated

==== Given The mbt-transformer plugin, src/test/resources/cucumber/Process.feature file is created as follows

The purpose of this step is to create a basic `feature` file. 

[NOTE]
====
Also steps should have 4 equal signs. 
Examples should have 3.
====

TIP: It works!

IMPORTANT: Asciidoctor is awesome, don't forget!

CAUTION: Don't forget to add the `...-caption` document attributes in the header of the document on GitHub.

WARNING: You have no reason not to use Asciidoctor.

----
@tag2 @tag3
Feature: This is a feature

  Background: Setup

    Given The blah application, something/Object page is created as follows
          \"\"\"
          Text 1
          
          Text 2
          \"\"\"

  @tag1
  Scenario: Submit One

    Basic EDI claim

     When The blah application, something/Object page is empty
     Then The blah application, something/Object page is empty
      But The blah application, something/Object page is empty
      And The blah application, something/Object page is empty
        * The blah application, something/Object page is empty

  Scenario Outline: Submit Several

    Given The blah application, DataTable page is created as follows
          |   h1 |   h2 |
          | <h3> | <h4> |

    Examples: Data Set

          |  h3 |  h4 |
          | v31 | v41 |
----

==== And The mbt-transformer plugin, src/test/java/org/farhan/stepdefs/blah/BlahObjectPageSteps.java file is created as follows

----
package org.farhan.stepdefs.blah;

import io.cucumber.java.en.Given;
import io.cucumber.datatable.DataTable;
import org.farhan.common.BlahFactory;

public class BlahObjectPageSteps {

    @Given("^The blah application, something/Object page is empty$")
    public void theBlahApplicationSomethingObjectPageIsEmpty() {
        BlahFactory.get("ObjectPage").setComponent("blah");
        BlahFactory.get("ObjectPage").setPath("something/Object");
        BlahFactory.get("ObjectPage").setInputOutputs("Empty");
    }
}
----

==== When The mbt-transformer plugin, cucumber-to-uml goal is executed with

[options="header"]
|===
| Tags
| tag1
|===

==== And The mbt-transformer plugin, uml-to-cucumber goal is executed

== Convert class to feature from graph

==== Then The mbt-transformer plugin, src/test/resources/cucumber/Process.feature file will be created as follows

----
@tag2 @tag3
Feature: This is a feature

  Background: Setup

    Given The blah application, something/Object page is created as follows
          \"\"\"
          Text 1
          
          Text 2
          \"\"\"

  @tag1
  Scenario: Submit One

    Basic EDI claim

     When The blah application, something/Object page is empty
     Then The blah application, something/Object page is empty
      But The blah application, something/Object page is empty
      And The blah application, something/Object page is empty
        * The blah application, something/Object page is empty

  Scenario Outline: Submit Several

    Given The blah application, DataTable page is created as follows
          | h1   | h2   |
          | <h3> | <h4> |

    Examples: Data Set

          | h3  | h4  |
          | v31 | v41 |
----

==== And The mbt-transformer plugin, src/test/java/org/farhan/stepdefs/blah/BlahObjectPageSteps.java file will be created as follows

----
package org.farhan.stepdefs.blah;

import io.cucumber.java.en.Given;
import io.cucumber.datatable.DataTable;
import org.farhan.common.BlahFactory;

public class BlahObjectPageSteps {

    @Given("^The blah application, something/Object page is empty$")
    public void theBlahApplicationSomethingObjectPageIsEmpty() {
        BlahFactory.get("ObjectPage").setComponent("blah");
        BlahFactory.get("ObjectPage").setPath("something/Object");
        BlahFactory.get("ObjectPage").setInputOutputs("Empty");
    }

    @Given("^The blah application, something/Object page is created as follows$")
    public void theBlahApplicationSomethingObjectPageIsCreatedAsFollows(String docString) {
        BlahFactory.get("ObjectPage").setComponent("blah");
        BlahFactory.get("ObjectPage").setPath("something/Object");
        BlahFactory.get("ObjectPage").setInputOutputs("Content", docString);
    }
}
----
