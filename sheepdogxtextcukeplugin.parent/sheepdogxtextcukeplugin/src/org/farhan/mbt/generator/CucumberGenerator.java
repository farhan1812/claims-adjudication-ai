/**
 * generated by Xtext 2.32.0
 */
package org.farhan.mbt.generator;

import com.google.common.collect.Iterables;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGenerator2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.generator.OutputConfiguration;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.farhan.mbt.CucumberStandaloneSetup;
import org.farhan.mbt.cucumber.AbstractScenario;
import org.farhan.mbt.cucumber.Cell;
import org.farhan.mbt.cucumber.CucumberFactory;
import org.farhan.mbt.cucumber.Examples;
import org.farhan.mbt.cucumber.ExamplesTable;
import org.farhan.mbt.cucumber.Feature;
import org.farhan.mbt.cucumber.Row;
import org.farhan.mbt.cucumber.ScenarioOutline;
import org.farhan.mbt.cucumber.Step;
import org.farhan.mbt.cucumber.StepTable;
import org.farhan.helper.LanguageAccessImpl;
import org.farhan.helper.StepDefinitionHelper;

/**
 * Generates code from your model files on save.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class CucumberGenerator implements IGenerator2 {

	@Override
	public void beforeGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	}

	@Override
	public void afterGenerate(Resource input, IFileSystemAccess2 fsa, IGeneratorContext context) {
	}

	@Override
	public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {

		if (resource.getContents().get(0) instanceof Feature) {
			Feature theFeature = (Feature) resource.getContents().get(0);
			for (AbstractScenario scenario : theFeature.getAbstractScenarios()) {
				HashMap<String, String> objects = new HashMap<String, String>();
				for (Step step : scenario.getSteps()) {
					doGenerate(step);
				}
			}
		}
	}

	public static void doGenerate(Step step) {
		try {
			StepDefinitionHelper.generate(new LanguageAccessImpl(step),
					SaveOptions.newBuilder().format().getOptions().toOptionsMap());
		} catch (Exception e) {
			logError(e, step);
		}
	}

	private static void logError(Exception e, Step step) {
		// TODO inject the logger instead
		System.out.println("There was a problem generating for step: " + step.getName());
		StringWriter sw = new StringWriter();
		e.printStackTrace(new PrintWriter(sw));
		System.out.println(sw.toString());
	}
}
