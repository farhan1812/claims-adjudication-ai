/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MyDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Step_AndKeyword_0_3_or_AsteriskKeyword_0_5_or_ButKeyword_0_4_or_GivenKeyword_0_0_or_ThenKeyword_0_2_or_WhenKeyword_0_1;
	protected AbstractElementAlias match_Step_EOLTerminalRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MyDslGrammarAccess) access;
		match_Step_AndKeyword_0_3_or_AsteriskKeyword_0_5_or_ButKeyword_0_4_or_GivenKeyword_0_0_or_ThenKeyword_0_2_or_WhenKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStepAccess().getAndKeyword_0_3()), new TokenAlias(false, false, grammarAccess.getStepAccess().getAsteriskKeyword_0_5()), new TokenAlias(false, false, grammarAccess.getStepAccess().getButKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getStepAccess().getGivenKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getStepAccess().getThenKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getStepAccess().getWhenKeyword_0_1()));
		match_Step_EOLTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getStepAccess().getEOLTerminalRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEOLRule())
			return getEOLToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EOL:
	 * 	('\r\n')+;
	 */
	protected String getEOLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\r\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Step_AndKeyword_0_3_or_AsteriskKeyword_0_5_or_ButKeyword_0_4_or_GivenKeyword_0_0_or_ThenKeyword_0_2_or_WhenKeyword_0_1.equals(syntax))
				emit_Step_AndKeyword_0_3_or_AsteriskKeyword_0_5_or_ButKeyword_0_4_or_GivenKeyword_0_0_or_ThenKeyword_0_2_or_WhenKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Step_EOLTerminalRuleCall_2_q.equals(syntax))
				emit_Step_EOLTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         'Given' | 
	  *         'When' | 
	  *         'Then' | 
	  *         'And' | 
	  *         'But' | 
	  *         '*'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=Phrase
	 
	 * </pre>
	 */
	protected void emit_Step_AndKeyword_0_3_or_AsteriskKeyword_0_5_or_ButKeyword_0_4_or_GivenKeyword_0_0_or_ThenKeyword_0_2_or_WhenKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     EOL?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Phrase (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Step_EOLTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
