/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.tests;

import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
public class ExamplesParsingTest extends ParsingTest {

	@Test
	public void parseExamplesWithName() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseExamplesWithoutName() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples:\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		assertErrors(sb);
	}

	@Test
	public void parseExamplesWithoutNameEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples: Describe what this data is about");
		assertErrors(sb);
	}

	@Test
	public void parseExamplesWithTags() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("@tag1\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseExamplesWithDescription() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("Basic EDI claim\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseExamplesWithMultilineDescription() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("Basic EDI claim\r\n");
		sb.append("No deductible\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseExamplesWithoutDescriptionEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("Basic EDI claim");
		assertErrors(sb);
	}

	@Test
	public void parseExamplesWithRows() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("Basic EDI claim\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("|   data3 |   data4 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseExamplesWithEverything() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario Outline: Submit a claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("@tag1 @tag2\r\n");
		sb.append("Examples: Describe what this data is about\r\n");
		sb.append("Basic EDI claim\r\n");
		sb.append("No deductible\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("|   data3 |   data4 |\r\n");
		assertNoErrors(sb);
	}
}
