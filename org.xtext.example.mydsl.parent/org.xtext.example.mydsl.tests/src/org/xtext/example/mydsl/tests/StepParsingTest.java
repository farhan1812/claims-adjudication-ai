/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.tests;

import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(MyDslInjectorProvider.class)
public class StepParsingTest extends ParsingTest {

	@Test
	public void parseStepWithName() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("When do step three\r\n");
		sb.append("Then do step four\r\n");
		sb.append("And do step two\r\n");
		sb.append("But do step five\r\n");
		sb.append("* do step six\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseStepWithoutName() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given\r\n");
		assertErrors(sb);
	}

	@Test
	public void parseStepWithoutNameEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one");
		assertErrors(sb);
	}

	@Test
	public void parseStepWithTable() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseStepWithMultirowTable() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseStepWithoutTableEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("| Header1 | Header2 |");
		assertErrors(sb);
	}

	@Test
	public void parseStepWithDocString() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseStepWithMultilineDocString() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("Line2\r\n");
		sb.append("Line3\r\n");
		sb.append("\"\"\"\r\n");
		assertNoErrors(sb);
	}

	@Test
	public void parseStepWithoutDocStringEOL() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"");
		assertErrors(sb);
	}

	@Test
	public void parseStepWithDocStringEmpty() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("\"\"\"\r\n");
		assertErrors(sb);
	}

	@Test
	public void parseStepWithDocStringIncomplete() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("\"\"\"\r\n");
		assertErrors(sb);
	}

	@Test
	public void parseStepWithEverything() throws Exception {
		StringBuilder sb = new StringBuilder();
		sb.append("Feature: This is a test feature\r\n");
		sb.append("Scenario: Submit a drug claim\r\n");
		sb.append("Given do step one\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("When do step three\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("Then do step four\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("And do step two\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("But do step five\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("* do step six\r\n");
		sb.append("| Header1 | Header2 |\r\n");
		sb.append("|   data1 |   data2 |\r\n");
		sb.append("Given do step one\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("When do step three\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Then do step four\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("And do step two\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("But do step five\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("* do step six\r\n");
		sb.append("\"\"\"\r\n");
		sb.append("Line1\r\n");
		sb.append("\"\"\"\r\n");
		assertNoErrors(sb);
	}
}
